<?php
/**
 * Subscription
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yoast\MyYoastApiClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * my-yoast
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yoast\MyYoastApiClient\Model;

use \ArrayAccess;

/**
 * Subscription Class Doc Comment
 *
 * @category    Class
 * @package     Yoast\MyYoastApiClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Subscription implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Subscription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'product_id' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'source_id' => 'double',
        'source_line_item_id' => 'double',
        'source_shop_id' => 'double',
        'status' => 'string',
        'currency' => 'string',
        'date' => '\DateTime',
        'price' => 'double',
        'name' => 'string',
        'requires_manual_renewal' => 'bool',
        'next_payment' => '\DateTime',
        'limit' => 'double',
        'used' => 'double',
        'subscriber_id' => 'string',
        'renewal_url' => 'string',
        'subscription_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'product_id' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'source_id' => 'double',
        'source_line_item_id' => 'double',
        'source_shop_id' => 'double',
        'status' => null,
        'currency' => null,
        'date' => 'date-time',
        'price' => 'double',
        'name' => null,
        'requires_manual_renewal' => null,
        'next_payment' => 'date-time',
        'limit' => 'double',
        'used' => 'double',
        'subscriber_id' => null,
        'renewal_url' => null,
        'subscription_number' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'product_id' => 'productId',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'source_id' => 'sourceId',
        'source_line_item_id' => 'sourceLineItemId',
        'source_shop_id' => 'sourceShopId',
        'status' => 'status',
        'currency' => 'currency',
        'date' => 'date',
        'price' => 'price',
        'name' => 'name',
        'requires_manual_renewal' => 'requiresManualRenewal',
        'next_payment' => 'nextPayment',
        'limit' => 'limit',
        'used' => 'used',
        'subscriber_id' => 'subscriberId',
        'renewal_url' => 'renewalUrl',
        'subscription_number' => 'subscriptionNumber'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'product_id' => 'setProductId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'source_id' => 'setSourceId',
        'source_line_item_id' => 'setSourceLineItemId',
        'source_shop_id' => 'setSourceShopId',
        'status' => 'setStatus',
        'currency' => 'setCurrency',
        'date' => 'setDate',
        'price' => 'setPrice',
        'name' => 'setName',
        'requires_manual_renewal' => 'setRequiresManualRenewal',
        'next_payment' => 'setNextPayment',
        'limit' => 'setLimit',
        'used' => 'setUsed',
        'subscriber_id' => 'setSubscriberId',
        'renewal_url' => 'setRenewalUrl',
        'subscription_number' => 'setSubscriptionNumber'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'product_id' => 'getProductId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'source_id' => 'getSourceId',
        'source_line_item_id' => 'getSourceLineItemId',
        'source_shop_id' => 'getSourceShopId',
        'status' => 'getStatus',
        'currency' => 'getCurrency',
        'date' => 'getDate',
        'price' => 'getPrice',
        'name' => 'getName',
        'requires_manual_renewal' => 'getRequiresManualRenewal',
        'next_payment' => 'getNextPayment',
        'limit' => 'getLimit',
        'used' => 'getUsed',
        'subscriber_id' => 'getSubscriberId',
        'renewal_url' => 'getRenewalUrl',
        'subscription_number' => 'getSubscriptionNumber'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['source_line_item_id'] = isset($data['source_line_item_id']) ? $data['source_line_item_id'] : null;
        $this->container['source_shop_id'] = isset($data['source_shop_id']) ? $data['source_shop_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['requires_manual_renewal'] = isset($data['requires_manual_renewal']) ? $data['requires_manual_renewal'] : true;
        $this->container['next_payment'] = isset($data['next_payment']) ? $data['next_payment'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : 0.0;
        $this->container['used'] = isset($data['used']) ? $data['used'] : 0.0;
        $this->container['subscriber_id'] = isset($data['subscriber_id']) ? $data['subscriber_id'] : null;
        $this->container['renewal_url'] = isset($data['renewal_url']) ? $data['renewal_url'] : null;
        $this->container['subscription_number'] = isset($data['subscription_number']) ? $data['subscription_number'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['product_id'] === null) {
            $invalid_properties[] = "'product_id' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalid_properties[] = "'start_date' can't be null";
        }
        if ($this->container['source_shop_id'] === null) {
            $invalid_properties[] = "'source_shop_id' can't be null";
        }
        if ($this->container['limit'] === null) {
            $invalid_properties[] = "'limit' can't be null";
        }
        if ($this->container['subscriber_id'] === null) {
            $invalid_properties[] = "'subscriber_id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['product_id'] === null) {
            return false;
        }
        if ($this->container['start_date'] === null) {
            return false;
        }
        if ($this->container['source_shop_id'] === null) {
            return false;
        }
        if ($this->container['limit'] === null) {
            return false;
        }
        if ($this->container['subscriber_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets product_id
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     * @param string $product_id
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets start_date
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     * @param \DateTime $start_date
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     * @param \DateTime $end_date
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets source_id
     * @return double
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     * @param double $source_id
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets source_line_item_id
     * @return double
     */
    public function getSourceLineItemId()
    {
        return $this->container['source_line_item_id'];
    }

    /**
     * Sets source_line_item_id
     * @param double $source_line_item_id
     * @return $this
     */
    public function setSourceLineItemId($source_line_item_id)
    {
        $this->container['source_line_item_id'] = $source_line_item_id;

        return $this;
    }

    /**
     * Gets source_shop_id
     * @return double
     */
    public function getSourceShopId()
    {
        return $this->container['source_shop_id'];
    }

    /**
     * Sets source_shop_id
     * @param double $source_shop_id
     * @return $this
     */
    public function setSourceShopId($source_shop_id)
    {
        $this->container['source_shop_id'] = $source_shop_id;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets date
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param \DateTime $date
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets price
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     * @param double $price
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets requires_manual_renewal
     * @return bool
     */
    public function getRequiresManualRenewal()
    {
        return $this->container['requires_manual_renewal'];
    }

    /**
     * Sets requires_manual_renewal
     * @param bool $requires_manual_renewal
     * @return $this
     */
    public function setRequiresManualRenewal($requires_manual_renewal)
    {
        $this->container['requires_manual_renewal'] = $requires_manual_renewal;

        return $this;
    }

    /**
     * Gets next_payment
     * @return \DateTime
     */
    public function getNextPayment()
    {
        return $this->container['next_payment'];
    }

    /**
     * Sets next_payment
     * @param \DateTime $next_payment
     * @return $this
     */
    public function setNextPayment($next_payment)
    {
        $this->container['next_payment'] = $next_payment;

        return $this;
    }

    /**
     * Gets limit
     * @return double
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     * @param double $limit
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets used
     * @return double
     */
    public function getUsed()
    {
        return $this->container['used'];
    }

    /**
     * Sets used
     * @param double $used
     * @return $this
     */
    public function setUsed($used)
    {
        $this->container['used'] = $used;

        return $this;
    }

    /**
     * Gets subscriber_id
     * @return string
     */
    public function getSubscriberId()
    {
        return $this->container['subscriber_id'];
    }

    /**
     * Sets subscriber_id
     * @param string $subscriber_id
     * @return $this
     */
    public function setSubscriberId($subscriber_id)
    {
        $this->container['subscriber_id'] = $subscriber_id;

        return $this;
    }

    /**
     * Gets renewal_url
     * @return string
     */
    public function getRenewalUrl()
    {
        return $this->container['renewal_url'];
    }

    /**
     * Sets renewal_url
     * @param string $renewal_url
     * @return $this
     */
    public function setRenewalUrl($renewal_url)
    {
        $this->container['renewal_url'] = $renewal_url;

        return $this;
    }

    /**
     * Gets subscription_number
     * @return string
     */
    public function getSubscriptionNumber()
    {
        return $this->container['subscription_number'];
    }

    /**
     * Sets subscription_number
     * @param string $subscription_number
     * @return $this
     */
    public function setSubscriptionNumber($subscription_number)
    {
        $this->container['subscription_number'] = $subscription_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Yoast\MyYoastApiClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Yoast\MyYoastApiClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


