<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yoast\MyYoastApiClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * my-yoast
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yoast\MyYoastApiClient\Model;

use \ArrayAccess;

/**
 * Order Class Doc Comment
 *
 * @category    Class
 * @package     Yoast\MyYoastApiClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Order implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'total_amount' => 'double',
        'subtotal_amount' => 'double',
        'date' => '\DateTime',
        'vat_number' => 'string',
        'customer_id' => 'string',
        'country_of_origin' => 'string',
        'payment_provider' => 'string',
        'payment_gateway' => 'string',
        'payment_reference' => 'string',
        'vat_total' => 'double',
        'discount_total' => 'double',
        'gl_number' => 'double',
        'status' => 'string',
        'source_id' => 'double',
        'source_shop_id' => 'double',
        'invoice_number' => 'string',
        'currency' => 'string',
        'customer_email' => 'string',
        'customer_first_name' => 'string',
        'customer_last_name' => 'string',
        'customer_company' => 'string',
        'customer_phone' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'address_city' => 'string',
        'address_state' => 'string',
        'address_zipcode' => 'string',
        'address_country' => 'string',
        'exclude_from_revenue' => 'bool',
        'renewal' => 'bool',
        'automatic' => 'bool',
        'created_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'total_amount' => 'double',
        'subtotal_amount' => 'double',
        'date' => 'date-time',
        'vat_number' => null,
        'customer_id' => null,
        'country_of_origin' => null,
        'payment_provider' => null,
        'payment_gateway' => null,
        'payment_reference' => null,
        'vat_total' => 'double',
        'discount_total' => 'double',
        'gl_number' => 'double',
        'status' => null,
        'source_id' => 'double',
        'source_shop_id' => 'double',
        'invoice_number' => null,
        'currency' => null,
        'customer_email' => null,
        'customer_first_name' => null,
        'customer_last_name' => null,
        'customer_company' => null,
        'customer_phone' => null,
        'address_line1' => null,
        'address_line2' => null,
        'address_city' => null,
        'address_state' => null,
        'address_zipcode' => null,
        'address_country' => null,
        'exclude_from_revenue' => null,
        'renewal' => null,
        'automatic' => null,
        'created_at' => 'date-time'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'total_amount' => 'totalAmount',
        'subtotal_amount' => 'subtotalAmount',
        'date' => 'date',
        'vat_number' => 'vatNumber',
        'customer_id' => 'customerId',
        'country_of_origin' => 'countryOfOrigin',
        'payment_provider' => 'paymentProvider',
        'payment_gateway' => 'paymentGateway',
        'payment_reference' => 'paymentReference',
        'vat_total' => 'vatTotal',
        'discount_total' => 'discountTotal',
        'gl_number' => 'glNumber',
        'status' => 'status',
        'source_id' => 'sourceId',
        'source_shop_id' => 'sourceShopId',
        'invoice_number' => 'invoiceNumber',
        'currency' => 'currency',
        'customer_email' => 'customerEmail',
        'customer_first_name' => 'customerFirstName',
        'customer_last_name' => 'customerLastName',
        'customer_company' => 'customerCompany',
        'customer_phone' => 'customerPhone',
        'address_line1' => 'addressLine1',
        'address_line2' => 'addressLine2',
        'address_city' => 'addressCity',
        'address_state' => 'addressState',
        'address_zipcode' => 'addressZipcode',
        'address_country' => 'addressCountry',
        'exclude_from_revenue' => 'excludeFromRevenue',
        'renewal' => 'renewal',
        'automatic' => 'automatic',
        'created_at' => 'createdAt'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'total_amount' => 'setTotalAmount',
        'subtotal_amount' => 'setSubtotalAmount',
        'date' => 'setDate',
        'vat_number' => 'setVatNumber',
        'customer_id' => 'setCustomerId',
        'country_of_origin' => 'setCountryOfOrigin',
        'payment_provider' => 'setPaymentProvider',
        'payment_gateway' => 'setPaymentGateway',
        'payment_reference' => 'setPaymentReference',
        'vat_total' => 'setVatTotal',
        'discount_total' => 'setDiscountTotal',
        'gl_number' => 'setGlNumber',
        'status' => 'setStatus',
        'source_id' => 'setSourceId',
        'source_shop_id' => 'setSourceShopId',
        'invoice_number' => 'setInvoiceNumber',
        'currency' => 'setCurrency',
        'customer_email' => 'setCustomerEmail',
        'customer_first_name' => 'setCustomerFirstName',
        'customer_last_name' => 'setCustomerLastName',
        'customer_company' => 'setCustomerCompany',
        'customer_phone' => 'setCustomerPhone',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'address_city' => 'setAddressCity',
        'address_state' => 'setAddressState',
        'address_zipcode' => 'setAddressZipcode',
        'address_country' => 'setAddressCountry',
        'exclude_from_revenue' => 'setExcludeFromRevenue',
        'renewal' => 'setRenewal',
        'automatic' => 'setAutomatic',
        'created_at' => 'setCreatedAt'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'total_amount' => 'getTotalAmount',
        'subtotal_amount' => 'getSubtotalAmount',
        'date' => 'getDate',
        'vat_number' => 'getVatNumber',
        'customer_id' => 'getCustomerId',
        'country_of_origin' => 'getCountryOfOrigin',
        'payment_provider' => 'getPaymentProvider',
        'payment_gateway' => 'getPaymentGateway',
        'payment_reference' => 'getPaymentReference',
        'vat_total' => 'getVatTotal',
        'discount_total' => 'getDiscountTotal',
        'gl_number' => 'getGlNumber',
        'status' => 'getStatus',
        'source_id' => 'getSourceId',
        'source_shop_id' => 'getSourceShopId',
        'invoice_number' => 'getInvoiceNumber',
        'currency' => 'getCurrency',
        'customer_email' => 'getCustomerEmail',
        'customer_first_name' => 'getCustomerFirstName',
        'customer_last_name' => 'getCustomerLastName',
        'customer_company' => 'getCustomerCompany',
        'customer_phone' => 'getCustomerPhone',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'address_city' => 'getAddressCity',
        'address_state' => 'getAddressState',
        'address_zipcode' => 'getAddressZipcode',
        'address_country' => 'getAddressCountry',
        'exclude_from_revenue' => 'getExcludeFromRevenue',
        'renewal' => 'getRenewal',
        'automatic' => 'getAutomatic',
        'created_at' => 'getCreatedAt'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['subtotal_amount'] = isset($data['subtotal_amount']) ? $data['subtotal_amount'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['vat_number'] = isset($data['vat_number']) ? $data['vat_number'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['country_of_origin'] = isset($data['country_of_origin']) ? $data['country_of_origin'] : null;
        $this->container['payment_provider'] = isset($data['payment_provider']) ? $data['payment_provider'] : null;
        $this->container['payment_gateway'] = isset($data['payment_gateway']) ? $data['payment_gateway'] : 'Adyen';
        $this->container['payment_reference'] = isset($data['payment_reference']) ? $data['payment_reference'] : null;
        $this->container['vat_total'] = isset($data['vat_total']) ? $data['vat_total'] : 0.0;
        $this->container['discount_total'] = isset($data['discount_total']) ? $data['discount_total'] : 0.0;
        $this->container['gl_number'] = isset($data['gl_number']) ? $data['gl_number'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['source_shop_id'] = isset($data['source_shop_id']) ? $data['source_shop_id'] : null;
        $this->container['invoice_number'] = isset($data['invoice_number']) ? $data['invoice_number'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['customer_email'] = isset($data['customer_email']) ? $data['customer_email'] : null;
        $this->container['customer_first_name'] = isset($data['customer_first_name']) ? $data['customer_first_name'] : null;
        $this->container['customer_last_name'] = isset($data['customer_last_name']) ? $data['customer_last_name'] : null;
        $this->container['customer_company'] = isset($data['customer_company']) ? $data['customer_company'] : null;
        $this->container['customer_phone'] = isset($data['customer_phone']) ? $data['customer_phone'] : null;
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['address_city'] = isset($data['address_city']) ? $data['address_city'] : null;
        $this->container['address_state'] = isset($data['address_state']) ? $data['address_state'] : null;
        $this->container['address_zipcode'] = isset($data['address_zipcode']) ? $data['address_zipcode'] : null;
        $this->container['address_country'] = isset($data['address_country']) ? $data['address_country'] : null;
        $this->container['exclude_from_revenue'] = isset($data['exclude_from_revenue']) ? $data['exclude_from_revenue'] : false;
        $this->container['renewal'] = isset($data['renewal']) ? $data['renewal'] : false;
        $this->container['automatic'] = isset($data['automatic']) ? $data['automatic'] : false;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        if ($this->container['total_amount'] === null) {
            $invalid_properties[] = "'total_amount' can't be null";
        }
        if ($this->container['subtotal_amount'] === null) {
            $invalid_properties[] = "'subtotal_amount' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalid_properties[] = "'date' can't be null";
        }
        if ($this->container['customer_id'] === null) {
            $invalid_properties[] = "'customer_id' can't be null";
        }
        if ($this->container['vat_total'] === null) {
            $invalid_properties[] = "'vat_total' can't be null";
        }
        if ($this->container['discount_total'] === null) {
            $invalid_properties[] = "'discount_total' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['source_id'] === null) {
            $invalid_properties[] = "'source_id' can't be null";
        }
        if ($this->container['source_shop_id'] === null) {
            $invalid_properties[] = "'source_shop_id' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalid_properties[] = "'currency' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['total_amount'] === null) {
            return false;
        }
        if ($this->container['subtotal_amount'] === null) {
            return false;
        }
        if ($this->container['date'] === null) {
            return false;
        }
        if ($this->container['customer_id'] === null) {
            return false;
        }
        if ($this->container['vat_total'] === null) {
            return false;
        }
        if ($this->container['discount_total'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['source_id'] === null) {
            return false;
        }
        if ($this->container['source_shop_id'] === null) {
            return false;
        }
        if ($this->container['currency'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets total_amount
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     * @param double $total_amount
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets subtotal_amount
     * @return double
     */
    public function getSubtotalAmount()
    {
        return $this->container['subtotal_amount'];
    }

    /**
     * Sets subtotal_amount
     * @param double $subtotal_amount
     * @return $this
     */
    public function setSubtotalAmount($subtotal_amount)
    {
        $this->container['subtotal_amount'] = $subtotal_amount;

        return $this;
    }

    /**
     * Gets date
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     * @param \DateTime $date
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets vat_number
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     * @param string $vat_number
     * @return $this
     */
    public function setVatNumber($vat_number)
    {
        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets customer_id
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     * @param string $customer_id
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets country_of_origin
     * @return string
     */
    public function getCountryOfOrigin()
    {
        return $this->container['country_of_origin'];
    }

    /**
     * Sets country_of_origin
     * @param string $country_of_origin
     * @return $this
     */
    public function setCountryOfOrigin($country_of_origin)
    {
        $this->container['country_of_origin'] = $country_of_origin;

        return $this;
    }

    /**
     * Gets payment_provider
     * @return string
     */
    public function getPaymentProvider()
    {
        return $this->container['payment_provider'];
    }

    /**
     * Sets payment_provider
     * @param string $payment_provider
     * @return $this
     */
    public function setPaymentProvider($payment_provider)
    {
        $this->container['payment_provider'] = $payment_provider;

        return $this;
    }

    /**
     * Gets payment_gateway
     * @return string
     */
    public function getPaymentGateway()
    {
        return $this->container['payment_gateway'];
    }

    /**
     * Sets payment_gateway
     * @param string $payment_gateway
     * @return $this
     */
    public function setPaymentGateway($payment_gateway)
    {
        $this->container['payment_gateway'] = $payment_gateway;

        return $this;
    }

    /**
     * Gets payment_reference
     * @return string
     */
    public function getPaymentReference()
    {
        return $this->container['payment_reference'];
    }

    /**
     * Sets payment_reference
     * @param string $payment_reference
     * @return $this
     */
    public function setPaymentReference($payment_reference)
    {
        $this->container['payment_reference'] = $payment_reference;

        return $this;
    }

    /**
     * Gets vat_total
     * @return double
     */
    public function getVatTotal()
    {
        return $this->container['vat_total'];
    }

    /**
     * Sets vat_total
     * @param double $vat_total
     * @return $this
     */
    public function setVatTotal($vat_total)
    {
        $this->container['vat_total'] = $vat_total;

        return $this;
    }

    /**
     * Gets discount_total
     * @return double
     */
    public function getDiscountTotal()
    {
        return $this->container['discount_total'];
    }

    /**
     * Sets discount_total
     * @param double $discount_total
     * @return $this
     */
    public function setDiscountTotal($discount_total)
    {
        $this->container['discount_total'] = $discount_total;

        return $this;
    }

    /**
     * Gets gl_number
     * @return double
     */
    public function getGlNumber()
    {
        return $this->container['gl_number'];
    }

    /**
     * Sets gl_number
     * @param double $gl_number
     * @return $this
     */
    public function setGlNumber($gl_number)
    {
        $this->container['gl_number'] = $gl_number;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets source_id
     * @return double
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     * @param double $source_id
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets source_shop_id
     * @return double
     */
    public function getSourceShopId()
    {
        return $this->container['source_shop_id'];
    }

    /**
     * Sets source_shop_id
     * @param double $source_shop_id
     * @return $this
     */
    public function setSourceShopId($source_shop_id)
    {
        $this->container['source_shop_id'] = $source_shop_id;

        return $this;
    }

    /**
     * Gets invoice_number
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     * @param string $invoice_number
     * @return $this
     */
    public function setInvoiceNumber($invoice_number)
    {
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets customer_email
     * @return string
     */
    public function getCustomerEmail()
    {
        return $this->container['customer_email'];
    }

    /**
     * Sets customer_email
     * @param string $customer_email
     * @return $this
     */
    public function setCustomerEmail($customer_email)
    {
        $this->container['customer_email'] = $customer_email;

        return $this;
    }

    /**
     * Gets customer_first_name
     * @return string
     */
    public function getCustomerFirstName()
    {
        return $this->container['customer_first_name'];
    }

    /**
     * Sets customer_first_name
     * @param string $customer_first_name
     * @return $this
     */
    public function setCustomerFirstName($customer_first_name)
    {
        $this->container['customer_first_name'] = $customer_first_name;

        return $this;
    }

    /**
     * Gets customer_last_name
     * @return string
     */
    public function getCustomerLastName()
    {
        return $this->container['customer_last_name'];
    }

    /**
     * Sets customer_last_name
     * @param string $customer_last_name
     * @return $this
     */
    public function setCustomerLastName($customer_last_name)
    {
        $this->container['customer_last_name'] = $customer_last_name;

        return $this;
    }

    /**
     * Gets customer_company
     * @return string
     */
    public function getCustomerCompany()
    {
        return $this->container['customer_company'];
    }

    /**
     * Sets customer_company
     * @param string $customer_company
     * @return $this
     */
    public function setCustomerCompany($customer_company)
    {
        $this->container['customer_company'] = $customer_company;

        return $this;
    }

    /**
     * Gets customer_phone
     * @return string
     */
    public function getCustomerPhone()
    {
        return $this->container['customer_phone'];
    }

    /**
     * Sets customer_phone
     * @param string $customer_phone
     * @return $this
     */
    public function setCustomerPhone($customer_phone)
    {
        $this->container['customer_phone'] = $customer_phone;

        return $this;
    }

    /**
     * Gets address_line1
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     * @param string $address_line1
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     * @param string $address_line2
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets address_city
     * @return string
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     * @param string $address_city
     * @return $this
     */
    public function setAddressCity($address_city)
    {
        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_state
     * @return string
     */
    public function getAddressState()
    {
        return $this->container['address_state'];
    }

    /**
     * Sets address_state
     * @param string $address_state
     * @return $this
     */
    public function setAddressState($address_state)
    {
        $this->container['address_state'] = $address_state;

        return $this;
    }

    /**
     * Gets address_zipcode
     * @return string
     */
    public function getAddressZipcode()
    {
        return $this->container['address_zipcode'];
    }

    /**
     * Sets address_zipcode
     * @param string $address_zipcode
     * @return $this
     */
    public function setAddressZipcode($address_zipcode)
    {
        $this->container['address_zipcode'] = $address_zipcode;

        return $this;
    }

    /**
     * Gets address_country
     * @return string
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     * @param string $address_country
     * @return $this
     */
    public function setAddressCountry($address_country)
    {
        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets exclude_from_revenue
     * @return bool
     */
    public function getExcludeFromRevenue()
    {
        return $this->container['exclude_from_revenue'];
    }

    /**
     * Sets exclude_from_revenue
     * @param bool $exclude_from_revenue
     * @return $this
     */
    public function setExcludeFromRevenue($exclude_from_revenue)
    {
        $this->container['exclude_from_revenue'] = $exclude_from_revenue;

        return $this;
    }

    /**
     * Gets renewal
     * @return bool
     */
    public function getRenewal()
    {
        return $this->container['renewal'];
    }

    /**
     * Sets renewal
     * @param bool $renewal
     * @return $this
     */
    public function setRenewal($renewal)
    {
        $this->container['renewal'] = $renewal;

        return $this;
    }

    /**
     * Gets automatic
     * @return bool
     */
    public function getAutomatic()
    {
        return $this->container['automatic'];
    }

    /**
     * Sets automatic
     * @param bool $automatic
     * @return $this
     */
    public function setAutomatic($automatic)
    {
        $this->container['automatic'] = $automatic;

        return $this;
    }

    /**
     * Gets created_at
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param \DateTime $created_at
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Yoast\MyYoastApiClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Yoast\MyYoastApiClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


