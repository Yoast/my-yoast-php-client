<?php
/**
 * CourseEnrollmentApi
 * PHP version 5
 *
 * @category Class
 * @package  Yoast\MyYoastApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * my-yoast
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yoast\MyYoastApiClient\Api;

use \Yoast\MyYoastApiClient\ApiClient;
use \Yoast\MyYoastApiClient\ApiException;
use \Yoast\MyYoastApiClient\Configuration;
use \Yoast\MyYoastApiClient\ObjectSerializer;

/**
 * CourseEnrollmentApi Class Doc Comment
 *
 * @category Class
 * @package  Yoast\MyYoastApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CourseEnrollmentApi
{
    /**
     * API Client
     *
     * @var \Yoast\MyYoastApiClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Yoast\MyYoastApiClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Yoast\MyYoastApiClient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Yoast\MyYoastApiClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Yoast\MyYoastApiClient\ApiClient $apiClient set the API client
     *
     * @return CourseEnrollmentApi
     */
    public function setApiClient(\Yoast\MyYoastApiClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation courseEnrollmentBulkInvite
     *
     * Bulk invites another Customer by email to use this Course Enrollment.
     *
     * @param string $line_item_id  (optional)
     * @param string $line_item_number  (optional)
     * @param string $email  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\CourseEnrollment[]
     */
    public function courseEnrollmentBulkInvite($line_item_id = null, $line_item_number = null, $email = null)
    {
        list($response) = $this->courseEnrollmentBulkInviteWithHttpInfo($line_item_id, $line_item_number, $email);
        return $response;
    }

    /**
     * Operation courseEnrollmentBulkInviteWithHttpInfo
     *
     * Bulk invites another Customer by email to use this Course Enrollment.
     *
     * @param string $line_item_id  (optional)
     * @param string $line_item_number  (optional)
     * @param string $email  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\CourseEnrollment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentBulkInviteWithHttpInfo($line_item_id = null, $line_item_number = null, $email = null)
    {
        // parse inputs
        $resourcePath = "/CourseEnrollments/bulkInvite";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // form params
        if ($line_item_id !== null) {
            $formParams['lineItemId'] = $this->apiClient->getSerializer()->toFormValue($line_item_id);
        }
        // form params
        if ($line_item_number !== null) {
            $formParams['lineItemNumber'] = $this->apiClient->getSerializer()->toFormValue($line_item_number);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\CourseEnrollment[]',
                '/CourseEnrollments/bulkInvite'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\CourseEnrollment[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\CourseEnrollment[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentCount
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse200
     */
    public function courseEnrollmentCount($where = null)
    {
        list($response) = $this->courseEnrollmentCountWithHttpInfo($where);
        return $response;
    }

    /**
     * Operation courseEnrollmentCountWithHttpInfo
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentCountWithHttpInfo($where = null)
    {
        // parse inputs
        $resourcePath = "/CourseEnrollments/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse200',
                '/CourseEnrollments/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentCreate
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\CourseEnrollment
     */
    public function courseEnrollmentCreate($data = null)
    {
        list($response) = $this->courseEnrollmentCreateWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation courseEnrollmentCreateWithHttpInfo
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\CourseEnrollment, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentCreateWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/CourseEnrollments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\CourseEnrollment',
                '/CourseEnrollments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentCreateChangeStreamGetCourseEnrollmentsChangeStream
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function courseEnrollmentCreateChangeStreamGetCourseEnrollmentsChangeStream($options = null)
    {
        list($response) = $this->courseEnrollmentCreateChangeStreamGetCourseEnrollmentsChangeStreamWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation courseEnrollmentCreateChangeStreamGetCourseEnrollmentsChangeStreamWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentCreateChangeStreamGetCourseEnrollmentsChangeStreamWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/CourseEnrollments/change-stream";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($options !== null) {
            $queryParams['options'] = $this->apiClient->getSerializer()->toQueryValue($options);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/CourseEnrollments/change-stream'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentCreateChangeStreamPostCourseEnrollmentsChangeStream
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function courseEnrollmentCreateChangeStreamPostCourseEnrollmentsChangeStream($options = null)
    {
        list($response) = $this->courseEnrollmentCreateChangeStreamPostCourseEnrollmentsChangeStreamWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation courseEnrollmentCreateChangeStreamPostCourseEnrollmentsChangeStreamWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentCreateChangeStreamPostCourseEnrollmentsChangeStreamWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/CourseEnrollments/change-stream";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // form params
        if ($options !== null) {
            $formParams['options'] = $this->apiClient->getSerializer()->toFormValue($options);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/CourseEnrollments/change-stream'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentDeleteById
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return object
     */
    public function courseEnrollmentDeleteById($id)
    {
        list($response) = $this->courseEnrollmentDeleteByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation courseEnrollmentDeleteByIdWithHttpInfo
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentDeleteByIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseEnrollmentDeleteById');
        }
        // parse inputs
        $resourcePath = "/CourseEnrollments/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/CourseEnrollments/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentExistsGetCourseEnrollmentsidExists
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse2001
     */
    public function courseEnrollmentExistsGetCourseEnrollmentsidExists($id)
    {
        list($response) = $this->courseEnrollmentExistsGetCourseEnrollmentsidExistsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation courseEnrollmentExistsGetCourseEnrollmentsidExistsWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentExistsGetCourseEnrollmentsidExistsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseEnrollmentExistsGetCourseEnrollmentsidExists');
        }
        // parse inputs
        $resourcePath = "/CourseEnrollments/{id}/exists";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse2001',
                '/CourseEnrollments/{id}/exists'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentExistsHeadCourseEnrollmentsid
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse2001
     */
    public function courseEnrollmentExistsHeadCourseEnrollmentsid($id)
    {
        list($response) = $this->courseEnrollmentExistsHeadCourseEnrollmentsidWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation courseEnrollmentExistsHeadCourseEnrollmentsidWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentExistsHeadCourseEnrollmentsidWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseEnrollmentExistsHeadCourseEnrollmentsid');
        }
        // parse inputs
        $resourcePath = "/CourseEnrollments/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse2001',
                '/CourseEnrollments/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentFind
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\CourseEnrollment[]
     */
    public function courseEnrollmentFind($filter = null)
    {
        list($response) = $this->courseEnrollmentFindWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation courseEnrollmentFindWithHttpInfo
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\CourseEnrollment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentFindWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/CourseEnrollments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\CourseEnrollment[]',
                '/CourseEnrollments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\CourseEnrollment[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\CourseEnrollment[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentFindById
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\CourseEnrollment
     */
    public function courseEnrollmentFindById($id, $filter = null)
    {
        list($response) = $this->courseEnrollmentFindByIdWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation courseEnrollmentFindByIdWithHttpInfo
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\CourseEnrollment, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentFindByIdWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseEnrollmentFindById');
        }
        // parse inputs
        $resourcePath = "/CourseEnrollments/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\CourseEnrollment',
                '/CourseEnrollments/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentFindOne
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\CourseEnrollment
     */
    public function courseEnrollmentFindOne($filter = null)
    {
        list($response) = $this->courseEnrollmentFindOneWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation courseEnrollmentFindOneWithHttpInfo
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\CourseEnrollment, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentFindOneWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/CourseEnrollments/findOne";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\CourseEnrollment',
                '/CourseEnrollments/findOne'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentFromAcademy
     *
     * @param string $progress_data  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\CourseEnrollment
     */
    public function courseEnrollmentFromAcademy($progress_data)
    {
        list($response) = $this->courseEnrollmentFromAcademyWithHttpInfo($progress_data);
        return $response;
    }

    /**
     * Operation courseEnrollmentFromAcademyWithHttpInfo
     *
     * @param string $progress_data  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\CourseEnrollment, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentFromAcademyWithHttpInfo($progress_data)
    {
        // verify the required parameter 'progress_data' is set
        if ($progress_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $progress_data when calling courseEnrollmentFromAcademy');
        }
        // parse inputs
        $resourcePath = "/CourseEnrollments/fromAcademy";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // form params
        if ($progress_data !== null) {
            $formParams['progressData'] = $this->apiClient->getSerializer()->toFormValue($progress_data);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\CourseEnrollment',
                '/CourseEnrollments/fromAcademy'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentGetLegacyExpiring
     *
     * Gets a list of legacy course enrollments that expire between two dates. A legacy enrollment is a course enrollment that does not belong to a subscription, but is instead created as a direct result of placing an order.
     *
     * @param \DateTime $from  (required)
     * @param \DateTime $until  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\CourseEnrollment[]
     */
    public function courseEnrollmentGetLegacyExpiring($from, $until)
    {
        list($response) = $this->courseEnrollmentGetLegacyExpiringWithHttpInfo($from, $until);
        return $response;
    }

    /**
     * Operation courseEnrollmentGetLegacyExpiringWithHttpInfo
     *
     * Gets a list of legacy course enrollments that expire between two dates. A legacy enrollment is a course enrollment that does not belong to a subscription, but is instead created as a direct result of placing an order.
     *
     * @param \DateTime $from  (required)
     * @param \DateTime $until  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\CourseEnrollment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentGetLegacyExpiringWithHttpInfo($from, $until)
    {
        // verify the required parameter 'from' is set
        if ($from === null) {
            throw new \InvalidArgumentException('Missing the required parameter $from when calling courseEnrollmentGetLegacyExpiring');
        }
        // verify the required parameter 'until' is set
        if ($until === null) {
            throw new \InvalidArgumentException('Missing the required parameter $until when calling courseEnrollmentGetLegacyExpiring');
        }
        // parse inputs
        $resourcePath = "/CourseEnrollments/getLegacyExpiring";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($until !== null) {
            $queryParams['until'] = $this->apiClient->getSerializer()->toQueryValue($until);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\CourseEnrollment[]',
                '/CourseEnrollments/getLegacyExpiring'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\CourseEnrollment[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\CourseEnrollment[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentInvite
     *
     * Invites another Customer by email to use this Course Enrollment.
     *
     * @param string $id  (required)
     * @param string $email  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\CourseEnrollment
     */
    public function courseEnrollmentInvite($id, $email = null)
    {
        list($response) = $this->courseEnrollmentInviteWithHttpInfo($id, $email);
        return $response;
    }

    /**
     * Operation courseEnrollmentInviteWithHttpInfo
     *
     * Invites another Customer by email to use this Course Enrollment.
     *
     * @param string $id  (required)
     * @param string $email  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\CourseEnrollment, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentInviteWithHttpInfo($id, $email = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseEnrollmentInvite');
        }
        // parse inputs
        $resourcePath = "/CourseEnrollments/{id}/invite";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = $this->apiClient->getSerializer()->toFormValue($email);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\CourseEnrollment',
                '/CourseEnrollments/{id}/invite'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentPatchOrCreate
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\CourseEnrollment
     */
    public function courseEnrollmentPatchOrCreate($data = null)
    {
        list($response) = $this->courseEnrollmentPatchOrCreateWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation courseEnrollmentPatchOrCreateWithHttpInfo
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\CourseEnrollment, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentPatchOrCreateWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/CourseEnrollments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\CourseEnrollment',
                '/CourseEnrollments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentPrototypeGetBuyer
     *
     * Fetches belongsTo relation buyer.
     *
     * @param string $id CourseEnrollment id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Customer
     */
    public function courseEnrollmentPrototypeGetBuyer($id, $refresh = null)
    {
        list($response) = $this->courseEnrollmentPrototypeGetBuyerWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation courseEnrollmentPrototypeGetBuyerWithHttpInfo
     *
     * Fetches belongsTo relation buyer.
     *
     * @param string $id CourseEnrollment id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentPrototypeGetBuyerWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseEnrollmentPrototypeGetBuyer');
        }
        // parse inputs
        $resourcePath = "/CourseEnrollments/{id}/buyer";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Customer',
                '/CourseEnrollments/{id}/buyer'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Customer', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentPrototypeGetCourse
     *
     * Fetches belongsTo relation course.
     *
     * @param string $id CourseEnrollment id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Course
     */
    public function courseEnrollmentPrototypeGetCourse($id, $refresh = null)
    {
        list($response) = $this->courseEnrollmentPrototypeGetCourseWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation courseEnrollmentPrototypeGetCourseWithHttpInfo
     *
     * Fetches belongsTo relation course.
     *
     * @param string $id CourseEnrollment id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Course, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentPrototypeGetCourseWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseEnrollmentPrototypeGetCourse');
        }
        // parse inputs
        $resourcePath = "/CourseEnrollments/{id}/course";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Course',
                '/CourseEnrollments/{id}/course'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Course', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Course', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentPrototypeGetOrder
     *
     * Fetches belongsTo relation order.
     *
     * @param string $id CourseEnrollment id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Order
     */
    public function courseEnrollmentPrototypeGetOrder($id, $refresh = null)
    {
        list($response) = $this->courseEnrollmentPrototypeGetOrderWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation courseEnrollmentPrototypeGetOrderWithHttpInfo
     *
     * Fetches belongsTo relation order.
     *
     * @param string $id CourseEnrollment id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentPrototypeGetOrderWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseEnrollmentPrototypeGetOrder');
        }
        // parse inputs
        $resourcePath = "/CourseEnrollments/{id}/order";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Order',
                '/CourseEnrollments/{id}/order'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Order', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Order', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentPrototypeGetProduct
     *
     * Fetches belongsTo relation product.
     *
     * @param string $id CourseEnrollment id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Product
     */
    public function courseEnrollmentPrototypeGetProduct($id, $refresh = null)
    {
        list($response) = $this->courseEnrollmentPrototypeGetProductWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation courseEnrollmentPrototypeGetProductWithHttpInfo
     *
     * Fetches belongsTo relation product.
     *
     * @param string $id CourseEnrollment id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Product, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentPrototypeGetProductWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseEnrollmentPrototypeGetProduct');
        }
        // parse inputs
        $resourcePath = "/CourseEnrollments/{id}/product";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Product',
                '/CourseEnrollments/{id}/product'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Product', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Product', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentPrototypeGetStudent
     *
     * Fetches belongsTo relation student.
     *
     * @param string $id CourseEnrollment id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Customer
     */
    public function courseEnrollmentPrototypeGetStudent($id, $refresh = null)
    {
        list($response) = $this->courseEnrollmentPrototypeGetStudentWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation courseEnrollmentPrototypeGetStudentWithHttpInfo
     *
     * Fetches belongsTo relation student.
     *
     * @param string $id CourseEnrollment id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentPrototypeGetStudentWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseEnrollmentPrototypeGetStudent');
        }
        // parse inputs
        $resourcePath = "/CourseEnrollments/{id}/student";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Customer',
                '/CourseEnrollments/{id}/student'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Customer', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentPrototypePatchAttributes
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id CourseEnrollment id (required)
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\CourseEnrollment
     */
    public function courseEnrollmentPrototypePatchAttributes($id, $data = null)
    {
        list($response) = $this->courseEnrollmentPrototypePatchAttributesWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation courseEnrollmentPrototypePatchAttributesWithHttpInfo
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id CourseEnrollment id (required)
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\CourseEnrollment, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentPrototypePatchAttributesWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseEnrollmentPrototypePatchAttributes');
        }
        // parse inputs
        $resourcePath = "/CourseEnrollments/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\CourseEnrollment',
                '/CourseEnrollments/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentReplaceByIdPostCourseEnrollmentsidReplace
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\CourseEnrollment
     */
    public function courseEnrollmentReplaceByIdPostCourseEnrollmentsidReplace($id, $data = null)
    {
        list($response) = $this->courseEnrollmentReplaceByIdPostCourseEnrollmentsidReplaceWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation courseEnrollmentReplaceByIdPostCourseEnrollmentsidReplaceWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\CourseEnrollment, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentReplaceByIdPostCourseEnrollmentsidReplaceWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseEnrollmentReplaceByIdPostCourseEnrollmentsidReplace');
        }
        // parse inputs
        $resourcePath = "/CourseEnrollments/{id}/replace";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\CourseEnrollment',
                '/CourseEnrollments/{id}/replace'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentReplaceByIdPutCourseEnrollmentsid
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\CourseEnrollment
     */
    public function courseEnrollmentReplaceByIdPutCourseEnrollmentsid($id, $data = null)
    {
        list($response) = $this->courseEnrollmentReplaceByIdPutCourseEnrollmentsidWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation courseEnrollmentReplaceByIdPutCourseEnrollmentsidWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\CourseEnrollment, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentReplaceByIdPutCourseEnrollmentsidWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseEnrollmentReplaceByIdPutCourseEnrollmentsid');
        }
        // parse inputs
        $resourcePath = "/CourseEnrollments/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\CourseEnrollment',
                '/CourseEnrollments/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentReplaceOrCreatePostCourseEnrollmentsReplaceOrCreate
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\CourseEnrollment
     */
    public function courseEnrollmentReplaceOrCreatePostCourseEnrollmentsReplaceOrCreate($data = null)
    {
        list($response) = $this->courseEnrollmentReplaceOrCreatePostCourseEnrollmentsReplaceOrCreateWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation courseEnrollmentReplaceOrCreatePostCourseEnrollmentsReplaceOrCreateWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\CourseEnrollment, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentReplaceOrCreatePostCourseEnrollmentsReplaceOrCreateWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/CourseEnrollments/replaceOrCreate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\CourseEnrollment',
                '/CourseEnrollments/replaceOrCreate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentReplaceOrCreatePutCourseEnrollments
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\CourseEnrollment
     */
    public function courseEnrollmentReplaceOrCreatePutCourseEnrollments($data = null)
    {
        list($response) = $this->courseEnrollmentReplaceOrCreatePutCourseEnrollmentsWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation courseEnrollmentReplaceOrCreatePutCourseEnrollmentsWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\CourseEnrollment, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentReplaceOrCreatePutCourseEnrollmentsWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/CourseEnrollments";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\CourseEnrollment',
                '/CourseEnrollments'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentTransfer
     *
     * @param double $from_source_id  (required)
     * @param double $to_source_id  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\CourseEnrollment[]
     */
    public function courseEnrollmentTransfer($from_source_id, $to_source_id)
    {
        list($response) = $this->courseEnrollmentTransferWithHttpInfo($from_source_id, $to_source_id);
        return $response;
    }

    /**
     * Operation courseEnrollmentTransferWithHttpInfo
     *
     * @param double $from_source_id  (required)
     * @param double $to_source_id  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\CourseEnrollment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentTransferWithHttpInfo($from_source_id, $to_source_id)
    {
        // verify the required parameter 'from_source_id' is set
        if ($from_source_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $from_source_id when calling courseEnrollmentTransfer');
        }
        // verify the required parameter 'to_source_id' is set
        if ($to_source_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $to_source_id when calling courseEnrollmentTransfer');
        }
        // parse inputs
        $resourcePath = "/CourseEnrollments/transfer";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // form params
        if ($from_source_id !== null) {
            $formParams['fromSourceId'] = $this->apiClient->getSerializer()->toFormValue($from_source_id);
        }
        // form params
        if ($to_source_id !== null) {
            $formParams['toSourceId'] = $this->apiClient->getSerializer()->toFormValue($to_source_id);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\CourseEnrollment[]',
                '/CourseEnrollments/transfer'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\CourseEnrollment[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\CourseEnrollment[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentUpdateAll
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse2002
     */
    public function courseEnrollmentUpdateAll($where = null, $data = null)
    {
        list($response) = $this->courseEnrollmentUpdateAllWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation courseEnrollmentUpdateAllWithHttpInfo
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentUpdateAllWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/CourseEnrollments/update";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse2002',
                '/CourseEnrollments/update'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseEnrollmentUpsertWithWhere
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\CourseEnrollment
     */
    public function courseEnrollmentUpsertWithWhere($where = null, $data = null)
    {
        list($response) = $this->courseEnrollmentUpsertWithWhereWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation courseEnrollmentUpsertWithWhereWithHttpInfo
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Yoast\MyYoastApiClient\Model\CourseEnrollment $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\CourseEnrollment, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseEnrollmentUpsertWithWhereWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/CourseEnrollments/upsertWithWhere";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\CourseEnrollment',
                '/CourseEnrollments/upsertWithWhere'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\CourseEnrollment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
