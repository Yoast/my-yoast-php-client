<?php
/**
 * ConfigurationServiceRequestApi
 * PHP version 5
 *
 * @category Class
 * @package  Yoast\MyYoastApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * my-yoast
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yoast\MyYoastApiClient\Api;

use \Yoast\MyYoastApiClient\ApiClient;
use \Yoast\MyYoastApiClient\ApiException;
use \Yoast\MyYoastApiClient\Configuration;
use \Yoast\MyYoastApiClient\ObjectSerializer;

/**
 * ConfigurationServiceRequestApi Class Doc Comment
 *
 * @category Class
 * @package  Yoast\MyYoastApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConfigurationServiceRequestApi
{
    /**
     * API Client
     *
     * @var \Yoast\MyYoastApiClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Yoast\MyYoastApiClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Yoast\MyYoastApiClient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Yoast\MyYoastApiClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Yoast\MyYoastApiClient\ApiClient $apiClient set the API client
     *
     * @return ConfigurationServiceRequestApi
     */
    public function setApiClient(\Yoast\MyYoastApiClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation configurationServiceRequestAssign
     *
     * @param string $id  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest
     */
    public function configurationServiceRequestAssign($id)
    {
        list($response) = $this->configurationServiceRequestAssignWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation configurationServiceRequestAssignWithHttpInfo
     *
     * @param string $id  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestAssignWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling configurationServiceRequestAssign');
        }
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/{id}/assign";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest',
                '/ConfigurationServiceRequests/{id}/assign'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestComplete
     *
     * @param string $id  (required)
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest
     */
    public function configurationServiceRequestComplete($id, $data = null)
    {
        list($response) = $this->configurationServiceRequestCompleteWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation configurationServiceRequestCompleteWithHttpInfo
     *
     * @param string $id  (required)
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestCompleteWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling configurationServiceRequestComplete');
        }
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/{id}/complete";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest',
                '/ConfigurationServiceRequests/{id}/complete'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestConfigure
     *
     * @param string $id  (required)
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest
     */
    public function configurationServiceRequestConfigure($id, $data = null)
    {
        list($response) = $this->configurationServiceRequestConfigureWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation configurationServiceRequestConfigureWithHttpInfo
     *
     * @param string $id  (required)
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestConfigureWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling configurationServiceRequestConfigure');
        }
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/{id}/configure";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest',
                '/ConfigurationServiceRequests/{id}/configure'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestCount
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse200
     */
    public function configurationServiceRequestCount($where = null)
    {
        list($response) = $this->configurationServiceRequestCountWithHttpInfo($where);
        return $response;
    }

    /**
     * Operation configurationServiceRequestCountWithHttpInfo
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestCountWithHttpInfo($where = null)
    {
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse200',
                '/ConfigurationServiceRequests/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestCreate
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest
     */
    public function configurationServiceRequestCreate($data = null)
    {
        list($response) = $this->configurationServiceRequestCreateWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation configurationServiceRequestCreateWithHttpInfo
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestCreateWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest',
                '/ConfigurationServiceRequests'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestCreateChangeStreamGetConfigurationServiceRequestsChangeStream
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function configurationServiceRequestCreateChangeStreamGetConfigurationServiceRequestsChangeStream($options = null)
    {
        list($response) = $this->configurationServiceRequestCreateChangeStreamGetConfigurationServiceRequestsChangeStreamWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation configurationServiceRequestCreateChangeStreamGetConfigurationServiceRequestsChangeStreamWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestCreateChangeStreamGetConfigurationServiceRequestsChangeStreamWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/change-stream";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($options !== null) {
            $queryParams['options'] = $this->apiClient->getSerializer()->toQueryValue($options);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/ConfigurationServiceRequests/change-stream'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestCreateChangeStreamPostConfigurationServiceRequestsChangeStream
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function configurationServiceRequestCreateChangeStreamPostConfigurationServiceRequestsChangeStream($options = null)
    {
        list($response) = $this->configurationServiceRequestCreateChangeStreamPostConfigurationServiceRequestsChangeStreamWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation configurationServiceRequestCreateChangeStreamPostConfigurationServiceRequestsChangeStreamWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestCreateChangeStreamPostConfigurationServiceRequestsChangeStreamWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/change-stream";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // form params
        if ($options !== null) {
            $formParams['options'] = $this->apiClient->getSerializer()->toFormValue($options);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/ConfigurationServiceRequests/change-stream'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestDeleteById
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return object
     */
    public function configurationServiceRequestDeleteById($id)
    {
        list($response) = $this->configurationServiceRequestDeleteByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation configurationServiceRequestDeleteByIdWithHttpInfo
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestDeleteByIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling configurationServiceRequestDeleteById');
        }
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/ConfigurationServiceRequests/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestExistsGetConfigurationServiceRequestsidExists
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse2001
     */
    public function configurationServiceRequestExistsGetConfigurationServiceRequestsidExists($id)
    {
        list($response) = $this->configurationServiceRequestExistsGetConfigurationServiceRequestsidExistsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation configurationServiceRequestExistsGetConfigurationServiceRequestsidExistsWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestExistsGetConfigurationServiceRequestsidExistsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling configurationServiceRequestExistsGetConfigurationServiceRequestsidExists');
        }
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/{id}/exists";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse2001',
                '/ConfigurationServiceRequests/{id}/exists'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestExistsHeadConfigurationServiceRequestsid
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse2001
     */
    public function configurationServiceRequestExistsHeadConfigurationServiceRequestsid($id)
    {
        list($response) = $this->configurationServiceRequestExistsHeadConfigurationServiceRequestsidWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation configurationServiceRequestExistsHeadConfigurationServiceRequestsidWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestExistsHeadConfigurationServiceRequestsidWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling configurationServiceRequestExistsHeadConfigurationServiceRequestsid');
        }
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse2001',
                '/ConfigurationServiceRequests/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestFind
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest[]
     */
    public function configurationServiceRequestFind($filter = null)
    {
        list($response) = $this->configurationServiceRequestFindWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation configurationServiceRequestFindWithHttpInfo
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest[], HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestFindWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest[]',
                '/ConfigurationServiceRequests'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestFindById
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest
     */
    public function configurationServiceRequestFindById($id, $filter = null)
    {
        list($response) = $this->configurationServiceRequestFindByIdWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation configurationServiceRequestFindByIdWithHttpInfo
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestFindByIdWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling configurationServiceRequestFindById');
        }
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest',
                '/ConfigurationServiceRequests/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestFindOne
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest
     */
    public function configurationServiceRequestFindOne($filter = null)
    {
        list($response) = $this->configurationServiceRequestFindOneWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation configurationServiceRequestFindOneWithHttpInfo
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestFindOneWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/findOne";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest',
                '/ConfigurationServiceRequests/findOne'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestPatchOrCreate
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest
     */
    public function configurationServiceRequestPatchOrCreate($data = null)
    {
        list($response) = $this->configurationServiceRequestPatchOrCreateWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation configurationServiceRequestPatchOrCreateWithHttpInfo
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestPatchOrCreateWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest',
                '/ConfigurationServiceRequests'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestPrototypeGetAssignee
     *
     * Fetches belongsTo relation assignee.
     *
     * @param string $id ConfigurationServiceRequest id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Customer
     */
    public function configurationServiceRequestPrototypeGetAssignee($id, $refresh = null)
    {
        list($response) = $this->configurationServiceRequestPrototypeGetAssigneeWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation configurationServiceRequestPrototypeGetAssigneeWithHttpInfo
     *
     * Fetches belongsTo relation assignee.
     *
     * @param string $id ConfigurationServiceRequest id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestPrototypeGetAssigneeWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling configurationServiceRequestPrototypeGetAssignee');
        }
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/{id}/assignee";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Customer',
                '/ConfigurationServiceRequests/{id}/assignee'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Customer', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestPrototypeGetCustomer
     *
     * Fetches belongsTo relation customer.
     *
     * @param string $id ConfigurationServiceRequest id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Customer
     */
    public function configurationServiceRequestPrototypeGetCustomer($id, $refresh = null)
    {
        list($response) = $this->configurationServiceRequestPrototypeGetCustomerWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation configurationServiceRequestPrototypeGetCustomerWithHttpInfo
     *
     * Fetches belongsTo relation customer.
     *
     * @param string $id ConfigurationServiceRequest id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Customer, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestPrototypeGetCustomerWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling configurationServiceRequestPrototypeGetCustomer');
        }
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/{id}/customer";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Customer',
                '/ConfigurationServiceRequests/{id}/customer'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Customer', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Customer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestPrototypeGetOrder
     *
     * Fetches belongsTo relation order.
     *
     * @param string $id ConfigurationServiceRequest id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Order
     */
    public function configurationServiceRequestPrototypeGetOrder($id, $refresh = null)
    {
        list($response) = $this->configurationServiceRequestPrototypeGetOrderWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation configurationServiceRequestPrototypeGetOrderWithHttpInfo
     *
     * Fetches belongsTo relation order.
     *
     * @param string $id ConfigurationServiceRequest id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestPrototypeGetOrderWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling configurationServiceRequestPrototypeGetOrder');
        }
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/{id}/order";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Order',
                '/ConfigurationServiceRequests/{id}/order'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Order', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Order', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestPrototypeGetSite
     *
     * Fetches belongsTo relation site.
     *
     * @param string $id ConfigurationServiceRequest id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Site
     */
    public function configurationServiceRequestPrototypeGetSite($id, $refresh = null)
    {
        list($response) = $this->configurationServiceRequestPrototypeGetSiteWithHttpInfo($id, $refresh);
        return $response;
    }

    /**
     * Operation configurationServiceRequestPrototypeGetSiteWithHttpInfo
     *
     * Fetches belongsTo relation site.
     *
     * @param string $id ConfigurationServiceRequest id (required)
     * @param bool $refresh  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Site, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestPrototypeGetSiteWithHttpInfo($id, $refresh = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling configurationServiceRequestPrototypeGetSite');
        }
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/{id}/site";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($refresh !== null) {
            $queryParams['refresh'] = $this->apiClient->getSerializer()->toQueryValue($refresh);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Site',
                '/ConfigurationServiceRequests/{id}/site'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Site', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Site', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestPrototypePatchAttributes
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id ConfigurationServiceRequest id (required)
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest
     */
    public function configurationServiceRequestPrototypePatchAttributes($id, $data = null)
    {
        list($response) = $this->configurationServiceRequestPrototypePatchAttributesWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation configurationServiceRequestPrototypePatchAttributesWithHttpInfo
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id ConfigurationServiceRequest id (required)
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestPrototypePatchAttributesWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling configurationServiceRequestPrototypePatchAttributes');
        }
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest',
                '/ConfigurationServiceRequests/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestReplaceByIdPostConfigurationServiceRequestsidReplace
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest
     */
    public function configurationServiceRequestReplaceByIdPostConfigurationServiceRequestsidReplace($id, $data = null)
    {
        list($response) = $this->configurationServiceRequestReplaceByIdPostConfigurationServiceRequestsidReplaceWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation configurationServiceRequestReplaceByIdPostConfigurationServiceRequestsidReplaceWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestReplaceByIdPostConfigurationServiceRequestsidReplaceWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling configurationServiceRequestReplaceByIdPostConfigurationServiceRequestsidReplace');
        }
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/{id}/replace";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest',
                '/ConfigurationServiceRequests/{id}/replace'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestReplaceByIdPutConfigurationServiceRequestsid
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest
     */
    public function configurationServiceRequestReplaceByIdPutConfigurationServiceRequestsid($id, $data = null)
    {
        list($response) = $this->configurationServiceRequestReplaceByIdPutConfigurationServiceRequestsidWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation configurationServiceRequestReplaceByIdPutConfigurationServiceRequestsidWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestReplaceByIdPutConfigurationServiceRequestsidWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling configurationServiceRequestReplaceByIdPutConfigurationServiceRequestsid');
        }
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest',
                '/ConfigurationServiceRequests/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestReplaceOrCreatePostConfigurationServiceRequestsReplaceOrCreate
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest
     */
    public function configurationServiceRequestReplaceOrCreatePostConfigurationServiceRequestsReplaceOrCreate($data = null)
    {
        list($response) = $this->configurationServiceRequestReplaceOrCreatePostConfigurationServiceRequestsReplaceOrCreateWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation configurationServiceRequestReplaceOrCreatePostConfigurationServiceRequestsReplaceOrCreateWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestReplaceOrCreatePostConfigurationServiceRequestsReplaceOrCreateWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/replaceOrCreate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest',
                '/ConfigurationServiceRequests/replaceOrCreate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestReplaceOrCreatePutConfigurationServiceRequests
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest
     */
    public function configurationServiceRequestReplaceOrCreatePutConfigurationServiceRequests($data = null)
    {
        list($response) = $this->configurationServiceRequestReplaceOrCreatePutConfigurationServiceRequestsWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation configurationServiceRequestReplaceOrCreatePutConfigurationServiceRequestsWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestReplaceOrCreatePutConfigurationServiceRequestsWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest',
                '/ConfigurationServiceRequests'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestReport
     *
     * @param string $id  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse2008
     */
    public function configurationServiceRequestReport($id)
    {
        list($response) = $this->configurationServiceRequestReportWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation configurationServiceRequestReportWithHttpInfo
     *
     * @param string $id  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestReportWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling configurationServiceRequestReport');
        }
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/{id}/report";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse2008',
                '/ConfigurationServiceRequests/{id}/report'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse2008', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse2008', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestUpdateAll
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse2002
     */
    public function configurationServiceRequestUpdateAll($where = null, $data = null)
    {
        list($response) = $this->configurationServiceRequestUpdateAllWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation configurationServiceRequestUpdateAllWithHttpInfo
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestUpdateAllWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/update";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse2002',
                '/ConfigurationServiceRequests/update'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation configurationServiceRequestUpsertWithWhere
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest
     */
    public function configurationServiceRequestUpsertWithWhere($where = null, $data = null)
    {
        list($response) = $this->configurationServiceRequestUpsertWithWhereWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation configurationServiceRequestUpsertWithWhereWithHttpInfo
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function configurationServiceRequestUpsertWithWhereWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/ConfigurationServiceRequests/upsertWithWhere";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest',
                '/ConfigurationServiceRequests/upsertWithWhere'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ConfigurationServiceRequest', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
