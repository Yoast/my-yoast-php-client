<?php
/**
 * MyYoastUserApi
 * PHP version 5
 *
 * @category Class
 * @package  Yoast\MyYoastApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * my-yoast
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yoast\MyYoastApiClient\Api;

use \Yoast\MyYoastApiClient\ApiClient;
use \Yoast\MyYoastApiClient\ApiException;
use \Yoast\MyYoastApiClient\Configuration;
use \Yoast\MyYoastApiClient\ObjectSerializer;

/**
 * MyYoastUserApi Class Doc Comment
 *
 * @category Class
 * @package  Yoast\MyYoastApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MyYoastUserApi
{
    /**
     * API Client
     *
     * @var \Yoast\MyYoastApiClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Yoast\MyYoastApiClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Yoast\MyYoastApiClient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Yoast\MyYoastApiClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Yoast\MyYoastApiClient\ApiClient $apiClient set the API client
     *
     * @return MyYoastUserApi
     */
    public function setApiClient(\Yoast\MyYoastApiClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation myYoastUserConfirm
     *
     * Confirm a user registration with email verification token.
     *
     * @param string $uid  (required)
     * @param string $token  (required)
     * @param string $redirect  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function myYoastUserConfirm($uid, $token, $redirect = null)
    {
        list($response) = $this->myYoastUserConfirmWithHttpInfo($uid, $token, $redirect);
        return $response;
    }

    /**
     * Operation myYoastUserConfirmWithHttpInfo
     *
     * Confirm a user registration with email verification token.
     *
     * @param string $uid  (required)
     * @param string $token  (required)
     * @param string $redirect  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserConfirmWithHttpInfo($uid, $token, $redirect = null)
    {
        // verify the required parameter 'uid' is set
        if ($uid === null) {
            throw new \InvalidArgumentException('Missing the required parameter $uid when calling myYoastUserConfirm');
        }
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException('Missing the required parameter $token when calling myYoastUserConfirm');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/confirm";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($uid !== null) {
            $queryParams['uid'] = $this->apiClient->getSerializer()->toQueryValue($uid);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = $this->apiClient->getSerializer()->toQueryValue($token);
        }
        // query params
        if ($redirect !== null) {
            $queryParams['redirect'] = $this->apiClient->getSerializer()->toQueryValue($redirect);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/MyYoastUsers/confirm'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserCount
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse200
     */
    public function myYoastUserCount($where = null)
    {
        list($response) = $this->myYoastUserCountWithHttpInfo($where);
        return $response;
    }

    /**
     * Operation myYoastUserCountWithHttpInfo
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserCountWithHttpInfo($where = null)
    {
        // parse inputs
        $resourcePath = "/MyYoastUsers/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse200',
                '/MyYoastUsers/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserCreate
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\MyYoastUser
     */
    public function myYoastUserCreate($data = null)
    {
        list($response) = $this->myYoastUserCreateWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation myYoastUserCreateWithHttpInfo
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\MyYoastUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserCreateWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/MyYoastUsers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\MyYoastUser',
                '/MyYoastUsers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\MyYoastUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\MyYoastUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserCreateChangeStreamGetMyYoastUsersChangeStream
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function myYoastUserCreateChangeStreamGetMyYoastUsersChangeStream($options = null)
    {
        list($response) = $this->myYoastUserCreateChangeStreamGetMyYoastUsersChangeStreamWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation myYoastUserCreateChangeStreamGetMyYoastUsersChangeStreamWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserCreateChangeStreamGetMyYoastUsersChangeStreamWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/MyYoastUsers/change-stream";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($options !== null) {
            $queryParams['options'] = $this->apiClient->getSerializer()->toQueryValue($options);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/MyYoastUsers/change-stream'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserCreateChangeStreamPostMyYoastUsersChangeStream
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function myYoastUserCreateChangeStreamPostMyYoastUsersChangeStream($options = null)
    {
        list($response) = $this->myYoastUserCreateChangeStreamPostMyYoastUsersChangeStreamWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation myYoastUserCreateChangeStreamPostMyYoastUsersChangeStreamWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserCreateChangeStreamPostMyYoastUsersChangeStreamWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/MyYoastUsers/change-stream";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($options !== null) {
            $formParams['options'] = $this->apiClient->getSerializer()->toFormValue($options);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/MyYoastUsers/change-stream'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserDeleteById
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return object
     */
    public function myYoastUserDeleteById($id)
    {
        list($response) = $this->myYoastUserDeleteByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation myYoastUserDeleteByIdWithHttpInfo
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserDeleteByIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserDeleteById');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/MyYoastUsers/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserExistsGetMyYoastUsersidExists
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse2001
     */
    public function myYoastUserExistsGetMyYoastUsersidExists($id)
    {
        list($response) = $this->myYoastUserExistsGetMyYoastUsersidExistsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation myYoastUserExistsGetMyYoastUsersidExistsWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserExistsGetMyYoastUsersidExistsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserExistsGetMyYoastUsersidExists');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/exists";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse2001',
                '/MyYoastUsers/{id}/exists'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserExistsHeadMyYoastUsersid
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse2001
     */
    public function myYoastUserExistsHeadMyYoastUsersid($id)
    {
        list($response) = $this->myYoastUserExistsHeadMyYoastUsersidWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation myYoastUserExistsHeadMyYoastUsersidWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserExistsHeadMyYoastUsersidWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserExistsHeadMyYoastUsersid');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse2001',
                '/MyYoastUsers/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserFind
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\MyYoastUser[]
     */
    public function myYoastUserFind($filter = null)
    {
        list($response) = $this->myYoastUserFindWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation myYoastUserFindWithHttpInfo
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\MyYoastUser[], HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserFindWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/MyYoastUsers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\MyYoastUser[]',
                '/MyYoastUsers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\MyYoastUser[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\MyYoastUser[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserFindById
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\MyYoastUser
     */
    public function myYoastUserFindById($id, $filter = null)
    {
        list($response) = $this->myYoastUserFindByIdWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation myYoastUserFindByIdWithHttpInfo
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\MyYoastUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserFindByIdWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserFindById');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\MyYoastUser',
                '/MyYoastUsers/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\MyYoastUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\MyYoastUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserFindOne
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\MyYoastUser
     */
    public function myYoastUserFindOne($filter = null)
    {
        list($response) = $this->myYoastUserFindOneWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation myYoastUserFindOneWithHttpInfo
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\MyYoastUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserFindOneWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/MyYoastUsers/findOne";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\MyYoastUser',
                '/MyYoastUsers/findOne'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\MyYoastUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\MyYoastUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserFindYoastComUser
     *
     * 
     *
     * @param double $id  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return object
     */
    public function myYoastUserFindYoastComUser($id)
    {
        list($response) = $this->myYoastUserFindYoastComUserWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation myYoastUserFindYoastComUserWithHttpInfo
     *
     * 
     *
     * @param double $id  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserFindYoastComUserWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserFindYoastComUser');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/findYoastComUser";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($id !== null) {
            $queryParams['id'] = $this->apiClient->getSerializer()->toQueryValue($id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/MyYoastUsers/findYoastComUser'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserLogin
     *
     * Login a user with username/email and password.
     *
     * @param object $credentials  (required)
     * @param string $include Related objects to include in the response. See the description of return value for more details. (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return object
     */
    public function myYoastUserLogin($credentials, $include = null)
    {
        list($response) = $this->myYoastUserLoginWithHttpInfo($credentials, $include);
        return $response;
    }

    /**
     * Operation myYoastUserLoginWithHttpInfo
     *
     * Login a user with username/email and password.
     *
     * @param object $credentials  (required)
     * @param string $include Related objects to include in the response. See the description of return value for more details. (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserLoginWithHttpInfo($credentials, $include = null)
    {
        // verify the required parameter 'credentials' is set
        if ($credentials === null) {
            throw new \InvalidArgumentException('Missing the required parameter $credentials when calling myYoastUserLogin');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/login";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($include !== null) {
            $queryParams['include'] = $this->apiClient->getSerializer()->toQueryValue($include);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($credentials)) {
            $_tempBody = $credentials;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/MyYoastUsers/login'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserLogout
     *
     * Logout a user with access token.
     *
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function myYoastUserLogout()
    {
        list($response) = $this->myYoastUserLogoutWithHttpInfo();
        return $response;
    }

    /**
     * Operation myYoastUserLogoutWithHttpInfo
     *
     * Logout a user with access token.
     *
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserLogoutWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/MyYoastUsers/logout";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/MyYoastUsers/logout'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPatchOrCreate
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\MyYoastUser
     */
    public function myYoastUserPatchOrCreate($data = null)
    {
        list($response) = $this->myYoastUserPatchOrCreateWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation myYoastUserPatchOrCreateWithHttpInfo
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\MyYoastUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPatchOrCreateWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/MyYoastUsers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\MyYoastUser',
                '/MyYoastUsers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\MyYoastUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\MyYoastUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserProfile
     *
     * 
     *
     * @param int $id  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse2003
     */
    public function myYoastUserProfile($id)
    {
        list($response) = $this->myYoastUserProfileWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation myYoastUserProfileWithHttpInfo
     *
     * 
     *
     * @param int $id  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserProfileWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserProfile');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/profile";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse2003',
                '/MyYoastUsers/{id}/profile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse2003', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse2003', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeCountAccessTokens
     *
     * Counts accessTokens of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse200
     */
    public function myYoastUserPrototypeCountAccessTokens($id, $where = null)
    {
        list($response) = $this->myYoastUserPrototypeCountAccessTokensWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeCountAccessTokensWithHttpInfo
     *
     * Counts accessTokens of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeCountAccessTokensWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeCountAccessTokens');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/accessTokens/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse200',
                '/MyYoastUsers/{id}/accessTokens/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeCountCredentials
     *
     * Counts credentials of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse200
     */
    public function myYoastUserPrototypeCountCredentials($id, $where = null)
    {
        list($response) = $this->myYoastUserPrototypeCountCredentialsWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeCountCredentialsWithHttpInfo
     *
     * Counts credentials of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeCountCredentialsWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeCountCredentials');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/credentials/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse200',
                '/MyYoastUsers/{id}/credentials/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeCountIdentities
     *
     * Counts identities of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse200
     */
    public function myYoastUserPrototypeCountIdentities($id, $where = null)
    {
        list($response) = $this->myYoastUserPrototypeCountIdentitiesWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeCountIdentitiesWithHttpInfo
     *
     * Counts identities of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeCountIdentitiesWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeCountIdentities');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/identities/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse200',
                '/MyYoastUsers/{id}/identities/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeCountOrders
     *
     * Counts orders of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse200
     */
    public function myYoastUserPrototypeCountOrders($id, $where = null)
    {
        list($response) = $this->myYoastUserPrototypeCountOrdersWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeCountOrdersWithHttpInfo
     *
     * Counts orders of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeCountOrdersWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeCountOrders');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/orders/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse200',
                '/MyYoastUsers/{id}/orders/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeCountSites
     *
     * Counts sites of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse200
     */
    public function myYoastUserPrototypeCountSites($id, $where = null)
    {
        list($response) = $this->myYoastUserPrototypeCountSitesWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeCountSitesWithHttpInfo
     *
     * Counts sites of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeCountSitesWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeCountSites');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/sites/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse200',
                '/MyYoastUsers/{id}/sites/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeCountSubscriptions
     *
     * Counts subscriptions of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse200
     */
    public function myYoastUserPrototypeCountSubscriptions($id, $where = null)
    {
        list($response) = $this->myYoastUserPrototypeCountSubscriptionsWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeCountSubscriptionsWithHttpInfo
     *
     * Counts subscriptions of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeCountSubscriptionsWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeCountSubscriptions');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/subscriptions/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse200',
                '/MyYoastUsers/{id}/subscriptions/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeCreateAccessTokens
     *
     * Creates a new instance in accessTokens of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\AccessToken $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\AccessToken
     */
    public function myYoastUserPrototypeCreateAccessTokens($id, $data = null)
    {
        list($response) = $this->myYoastUserPrototypeCreateAccessTokensWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeCreateAccessTokensWithHttpInfo
     *
     * Creates a new instance in accessTokens of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\AccessToken $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\AccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeCreateAccessTokensWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeCreateAccessTokens');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/accessTokens";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\AccessToken',
                '/MyYoastUsers/{id}/accessTokens'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\AccessToken', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\AccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeCreateCredentials
     *
     * Creates a new instance in credentials of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\UserCredential $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\UserCredential
     */
    public function myYoastUserPrototypeCreateCredentials($id, $data = null)
    {
        list($response) = $this->myYoastUserPrototypeCreateCredentialsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeCreateCredentialsWithHttpInfo
     *
     * Creates a new instance in credentials of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\UserCredential $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\UserCredential, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeCreateCredentialsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeCreateCredentials');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/credentials";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\UserCredential',
                '/MyYoastUsers/{id}/credentials'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\UserCredential', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\UserCredential', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeCreateIdentities
     *
     * Creates a new instance in identities of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\UserIdentity $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\UserIdentity
     */
    public function myYoastUserPrototypeCreateIdentities($id, $data = null)
    {
        list($response) = $this->myYoastUserPrototypeCreateIdentitiesWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeCreateIdentitiesWithHttpInfo
     *
     * Creates a new instance in identities of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\UserIdentity $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\UserIdentity, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeCreateIdentitiesWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeCreateIdentities');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/identities";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\UserIdentity',
                '/MyYoastUsers/{id}/identities'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\UserIdentity', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\UserIdentity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeCreateOrders
     *
     * Creates a new instance in orders of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\Order $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Order
     */
    public function myYoastUserPrototypeCreateOrders($id, $data = null)
    {
        list($response) = $this->myYoastUserPrototypeCreateOrdersWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeCreateOrdersWithHttpInfo
     *
     * Creates a new instance in orders of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\Order $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeCreateOrdersWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeCreateOrders');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/orders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Order',
                '/MyYoastUsers/{id}/orders'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Order', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Order', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeCreateSites
     *
     * Creates a new instance in sites of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\Site $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Site
     */
    public function myYoastUserPrototypeCreateSites($id, $data = null)
    {
        list($response) = $this->myYoastUserPrototypeCreateSitesWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeCreateSitesWithHttpInfo
     *
     * Creates a new instance in sites of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\Site $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Site, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeCreateSitesWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeCreateSites');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/sites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Site',
                '/MyYoastUsers/{id}/sites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Site', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Site', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeCreateSubscriptions
     *
     * Creates a new instance in subscriptions of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\Subscription $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Subscription
     */
    public function myYoastUserPrototypeCreateSubscriptions($id, $data = null)
    {
        list($response) = $this->myYoastUserPrototypeCreateSubscriptionsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeCreateSubscriptionsWithHttpInfo
     *
     * Creates a new instance in subscriptions of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\Subscription $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeCreateSubscriptionsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeCreateSubscriptions');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/subscriptions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Subscription',
                '/MyYoastUsers/{id}/subscriptions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Subscription', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Subscription', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeDeleteAccessTokens
     *
     * Deletes all accessTokens of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function myYoastUserPrototypeDeleteAccessTokens($id)
    {
        list($response) = $this->myYoastUserPrototypeDeleteAccessTokensWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeDeleteAccessTokensWithHttpInfo
     *
     * Deletes all accessTokens of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeDeleteAccessTokensWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeDeleteAccessTokens');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/accessTokens";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/MyYoastUsers/{id}/accessTokens'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeDeleteCredentials
     *
     * Deletes all credentials of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function myYoastUserPrototypeDeleteCredentials($id)
    {
        list($response) = $this->myYoastUserPrototypeDeleteCredentialsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeDeleteCredentialsWithHttpInfo
     *
     * Deletes all credentials of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeDeleteCredentialsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeDeleteCredentials');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/credentials";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/MyYoastUsers/{id}/credentials'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeDeleteIdentities
     *
     * Deletes all identities of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function myYoastUserPrototypeDeleteIdentities($id)
    {
        list($response) = $this->myYoastUserPrototypeDeleteIdentitiesWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeDeleteIdentitiesWithHttpInfo
     *
     * Deletes all identities of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeDeleteIdentitiesWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeDeleteIdentities');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/identities";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/MyYoastUsers/{id}/identities'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeDeleteOrders
     *
     * Deletes all orders of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function myYoastUserPrototypeDeleteOrders($id)
    {
        list($response) = $this->myYoastUserPrototypeDeleteOrdersWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeDeleteOrdersWithHttpInfo
     *
     * Deletes all orders of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeDeleteOrdersWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeDeleteOrders');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/orders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/MyYoastUsers/{id}/orders'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeDeleteSites
     *
     * Deletes all sites of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function myYoastUserPrototypeDeleteSites($id)
    {
        list($response) = $this->myYoastUserPrototypeDeleteSitesWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeDeleteSitesWithHttpInfo
     *
     * Deletes all sites of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeDeleteSitesWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeDeleteSites');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/sites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/MyYoastUsers/{id}/sites'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeDeleteSubscriptions
     *
     * Deletes all subscriptions of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function myYoastUserPrototypeDeleteSubscriptions($id)
    {
        list($response) = $this->myYoastUserPrototypeDeleteSubscriptionsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeDeleteSubscriptionsWithHttpInfo
     *
     * Deletes all subscriptions of this model.
     *
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeDeleteSubscriptionsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeDeleteSubscriptions');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/subscriptions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/MyYoastUsers/{id}/subscriptions'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeDestroyByIdAccessTokens
     *
     * Delete a related item by id for accessTokens.
     *
     * @param string $fk Foreign key for accessTokens (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function myYoastUserPrototypeDestroyByIdAccessTokens($fk, $id)
    {
        list($response) = $this->myYoastUserPrototypeDestroyByIdAccessTokensWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeDestroyByIdAccessTokensWithHttpInfo
     *
     * Delete a related item by id for accessTokens.
     *
     * @param string $fk Foreign key for accessTokens (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeDestroyByIdAccessTokensWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeDestroyByIdAccessTokens');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeDestroyByIdAccessTokens');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/accessTokens/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/MyYoastUsers/{id}/accessTokens/{fk}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeDestroyByIdCredentials
     *
     * Delete a related item by id for credentials.
     *
     * @param string $fk Foreign key for credentials (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function myYoastUserPrototypeDestroyByIdCredentials($fk, $id)
    {
        list($response) = $this->myYoastUserPrototypeDestroyByIdCredentialsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeDestroyByIdCredentialsWithHttpInfo
     *
     * Delete a related item by id for credentials.
     *
     * @param string $fk Foreign key for credentials (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeDestroyByIdCredentialsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeDestroyByIdCredentials');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeDestroyByIdCredentials');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/credentials/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/MyYoastUsers/{id}/credentials/{fk}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeDestroyByIdIdentities
     *
     * Delete a related item by id for identities.
     *
     * @param string $fk Foreign key for identities (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function myYoastUserPrototypeDestroyByIdIdentities($fk, $id)
    {
        list($response) = $this->myYoastUserPrototypeDestroyByIdIdentitiesWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeDestroyByIdIdentitiesWithHttpInfo
     *
     * Delete a related item by id for identities.
     *
     * @param string $fk Foreign key for identities (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeDestroyByIdIdentitiesWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeDestroyByIdIdentities');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeDestroyByIdIdentities');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/identities/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/MyYoastUsers/{id}/identities/{fk}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeDestroyByIdOrders
     *
     * Delete a related item by id for orders.
     *
     * @param string $fk Foreign key for orders (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function myYoastUserPrototypeDestroyByIdOrders($fk, $id)
    {
        list($response) = $this->myYoastUserPrototypeDestroyByIdOrdersWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeDestroyByIdOrdersWithHttpInfo
     *
     * Delete a related item by id for orders.
     *
     * @param string $fk Foreign key for orders (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeDestroyByIdOrdersWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeDestroyByIdOrders');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeDestroyByIdOrders');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/orders/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/MyYoastUsers/{id}/orders/{fk}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeDestroyByIdSites
     *
     * Delete a related item by id for sites.
     *
     * @param string $fk Foreign key for sites (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function myYoastUserPrototypeDestroyByIdSites($fk, $id)
    {
        list($response) = $this->myYoastUserPrototypeDestroyByIdSitesWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeDestroyByIdSitesWithHttpInfo
     *
     * Delete a related item by id for sites.
     *
     * @param string $fk Foreign key for sites (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeDestroyByIdSitesWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeDestroyByIdSites');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeDestroyByIdSites');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/sites/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/MyYoastUsers/{id}/sites/{fk}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeDestroyByIdSubscriptions
     *
     * Delete a related item by id for subscriptions.
     *
     * @param string $fk Foreign key for subscriptions (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function myYoastUserPrototypeDestroyByIdSubscriptions($fk, $id)
    {
        list($response) = $this->myYoastUserPrototypeDestroyByIdSubscriptionsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeDestroyByIdSubscriptionsWithHttpInfo
     *
     * Delete a related item by id for subscriptions.
     *
     * @param string $fk Foreign key for subscriptions (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeDestroyByIdSubscriptionsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeDestroyByIdSubscriptions');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeDestroyByIdSubscriptions');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/subscriptions/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/MyYoastUsers/{id}/subscriptions/{fk}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeFindByIdAccessTokens
     *
     * Find a related item by id for accessTokens.
     *
     * @param string $fk Foreign key for accessTokens (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\AccessToken
     */
    public function myYoastUserPrototypeFindByIdAccessTokens($fk, $id)
    {
        list($response) = $this->myYoastUserPrototypeFindByIdAccessTokensWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeFindByIdAccessTokensWithHttpInfo
     *
     * Find a related item by id for accessTokens.
     *
     * @param string $fk Foreign key for accessTokens (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\AccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeFindByIdAccessTokensWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeFindByIdAccessTokens');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeFindByIdAccessTokens');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/accessTokens/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\AccessToken',
                '/MyYoastUsers/{id}/accessTokens/{fk}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\AccessToken', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\AccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeFindByIdCredentials
     *
     * Find a related item by id for credentials.
     *
     * @param string $fk Foreign key for credentials (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\UserCredential
     */
    public function myYoastUserPrototypeFindByIdCredentials($fk, $id)
    {
        list($response) = $this->myYoastUserPrototypeFindByIdCredentialsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeFindByIdCredentialsWithHttpInfo
     *
     * Find a related item by id for credentials.
     *
     * @param string $fk Foreign key for credentials (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\UserCredential, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeFindByIdCredentialsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeFindByIdCredentials');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeFindByIdCredentials');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/credentials/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\UserCredential',
                '/MyYoastUsers/{id}/credentials/{fk}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\UserCredential', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\UserCredential', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeFindByIdIdentities
     *
     * Find a related item by id for identities.
     *
     * @param string $fk Foreign key for identities (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\UserIdentity
     */
    public function myYoastUserPrototypeFindByIdIdentities($fk, $id)
    {
        list($response) = $this->myYoastUserPrototypeFindByIdIdentitiesWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeFindByIdIdentitiesWithHttpInfo
     *
     * Find a related item by id for identities.
     *
     * @param string $fk Foreign key for identities (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\UserIdentity, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeFindByIdIdentitiesWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeFindByIdIdentities');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeFindByIdIdentities');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/identities/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\UserIdentity',
                '/MyYoastUsers/{id}/identities/{fk}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\UserIdentity', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\UserIdentity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeFindByIdOrders
     *
     * Find a related item by id for orders.
     *
     * @param string $fk Foreign key for orders (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Order
     */
    public function myYoastUserPrototypeFindByIdOrders($fk, $id)
    {
        list($response) = $this->myYoastUserPrototypeFindByIdOrdersWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeFindByIdOrdersWithHttpInfo
     *
     * Find a related item by id for orders.
     *
     * @param string $fk Foreign key for orders (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeFindByIdOrdersWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeFindByIdOrders');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeFindByIdOrders');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/orders/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Order',
                '/MyYoastUsers/{id}/orders/{fk}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Order', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Order', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeFindByIdSites
     *
     * Find a related item by id for sites.
     *
     * @param string $fk Foreign key for sites (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Site
     */
    public function myYoastUserPrototypeFindByIdSites($fk, $id)
    {
        list($response) = $this->myYoastUserPrototypeFindByIdSitesWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeFindByIdSitesWithHttpInfo
     *
     * Find a related item by id for sites.
     *
     * @param string $fk Foreign key for sites (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Site, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeFindByIdSitesWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeFindByIdSites');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeFindByIdSites');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/sites/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Site',
                '/MyYoastUsers/{id}/sites/{fk}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Site', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Site', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeFindByIdSubscriptions
     *
     * Find a related item by id for subscriptions.
     *
     * @param string $fk Foreign key for subscriptions (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Subscription
     */
    public function myYoastUserPrototypeFindByIdSubscriptions($fk, $id)
    {
        list($response) = $this->myYoastUserPrototypeFindByIdSubscriptionsWithHttpInfo($fk, $id);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeFindByIdSubscriptionsWithHttpInfo
     *
     * Find a related item by id for subscriptions.
     *
     * @param string $fk Foreign key for subscriptions (required)
     * @param string $id MyYoastUser id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeFindByIdSubscriptionsWithHttpInfo($fk, $id)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeFindByIdSubscriptions');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeFindByIdSubscriptions');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/subscriptions/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Subscription',
                '/MyYoastUsers/{id}/subscriptions/{fk}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Subscription', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Subscription', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeGetAccessTokens
     *
     * Queries accessTokens of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $filter  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\AccessToken[]
     */
    public function myYoastUserPrototypeGetAccessTokens($id, $filter = null)
    {
        list($response) = $this->myYoastUserPrototypeGetAccessTokensWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeGetAccessTokensWithHttpInfo
     *
     * Queries accessTokens of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $filter  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\AccessToken[], HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeGetAccessTokensWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeGetAccessTokens');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/accessTokens";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\AccessToken[]',
                '/MyYoastUsers/{id}/accessTokens'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\AccessToken[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\AccessToken[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeGetCredentials
     *
     * Queries credentials of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $filter  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\UserCredential[]
     */
    public function myYoastUserPrototypeGetCredentials($id, $filter = null)
    {
        list($response) = $this->myYoastUserPrototypeGetCredentialsWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeGetCredentialsWithHttpInfo
     *
     * Queries credentials of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $filter  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\UserCredential[], HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeGetCredentialsWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeGetCredentials');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/credentials";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\UserCredential[]',
                '/MyYoastUsers/{id}/credentials'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\UserCredential[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\UserCredential[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeGetIdentities
     *
     * Queries identities of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $filter  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\UserIdentity[]
     */
    public function myYoastUserPrototypeGetIdentities($id, $filter = null)
    {
        list($response) = $this->myYoastUserPrototypeGetIdentitiesWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeGetIdentitiesWithHttpInfo
     *
     * Queries identities of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $filter  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\UserIdentity[], HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeGetIdentitiesWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeGetIdentities');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/identities";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\UserIdentity[]',
                '/MyYoastUsers/{id}/identities'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\UserIdentity[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\UserIdentity[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeGetOrders
     *
     * Queries orders of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $filter  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Order[]
     */
    public function myYoastUserPrototypeGetOrders($id, $filter = null)
    {
        list($response) = $this->myYoastUserPrototypeGetOrdersWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeGetOrdersWithHttpInfo
     *
     * Queries orders of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $filter  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Order[], HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeGetOrdersWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeGetOrders');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/orders";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Order[]',
                '/MyYoastUsers/{id}/orders'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Order[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Order[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeGetSites
     *
     * Queries sites of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $filter  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Site[]
     */
    public function myYoastUserPrototypeGetSites($id, $filter = null)
    {
        list($response) = $this->myYoastUserPrototypeGetSitesWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeGetSitesWithHttpInfo
     *
     * Queries sites of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $filter  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Site[], HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeGetSitesWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeGetSites');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/sites";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Site[]',
                '/MyYoastUsers/{id}/sites'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Site[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Site[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeGetSubscriptions
     *
     * Queries subscriptions of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $filter  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Subscription[]
     */
    public function myYoastUserPrototypeGetSubscriptions($id, $filter = null)
    {
        list($response) = $this->myYoastUserPrototypeGetSubscriptionsWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeGetSubscriptionsWithHttpInfo
     *
     * Queries subscriptions of MyYoastUser.
     *
     * @param string $id MyYoastUser id (required)
     * @param string $filter  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Subscription[], HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeGetSubscriptionsWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeGetSubscriptions');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/subscriptions";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Subscription[]',
                '/MyYoastUsers/{id}/subscriptions'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Subscription[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Subscription[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypePatchAttributes
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\MyYoastUser
     */
    public function myYoastUserPrototypePatchAttributes($id, $data = null)
    {
        list($response) = $this->myYoastUserPrototypePatchAttributesWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypePatchAttributesWithHttpInfo
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\MyYoastUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypePatchAttributesWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypePatchAttributes');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\MyYoastUser',
                '/MyYoastUsers/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\MyYoastUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\MyYoastUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeUpdateByIdAccessTokens
     *
     * Update a related item by id for accessTokens.
     *
     * @param string $fk Foreign key for accessTokens (required)
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\AccessToken $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\AccessToken
     */
    public function myYoastUserPrototypeUpdateByIdAccessTokens($fk, $id, $data = null)
    {
        list($response) = $this->myYoastUserPrototypeUpdateByIdAccessTokensWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeUpdateByIdAccessTokensWithHttpInfo
     *
     * Update a related item by id for accessTokens.
     *
     * @param string $fk Foreign key for accessTokens (required)
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\AccessToken $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\AccessToken, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeUpdateByIdAccessTokensWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeUpdateByIdAccessTokens');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeUpdateByIdAccessTokens');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/accessTokens/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\AccessToken',
                '/MyYoastUsers/{id}/accessTokens/{fk}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\AccessToken', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\AccessToken', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeUpdateByIdCredentials
     *
     * Update a related item by id for credentials.
     *
     * @param string $fk Foreign key for credentials (required)
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\UserCredential $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\UserCredential
     */
    public function myYoastUserPrototypeUpdateByIdCredentials($fk, $id, $data = null)
    {
        list($response) = $this->myYoastUserPrototypeUpdateByIdCredentialsWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeUpdateByIdCredentialsWithHttpInfo
     *
     * Update a related item by id for credentials.
     *
     * @param string $fk Foreign key for credentials (required)
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\UserCredential $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\UserCredential, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeUpdateByIdCredentialsWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeUpdateByIdCredentials');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeUpdateByIdCredentials');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/credentials/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\UserCredential',
                '/MyYoastUsers/{id}/credentials/{fk}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\UserCredential', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\UserCredential', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeUpdateByIdIdentities
     *
     * Update a related item by id for identities.
     *
     * @param string $fk Foreign key for identities (required)
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\UserIdentity $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\UserIdentity
     */
    public function myYoastUserPrototypeUpdateByIdIdentities($fk, $id, $data = null)
    {
        list($response) = $this->myYoastUserPrototypeUpdateByIdIdentitiesWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeUpdateByIdIdentitiesWithHttpInfo
     *
     * Update a related item by id for identities.
     *
     * @param string $fk Foreign key for identities (required)
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\UserIdentity $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\UserIdentity, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeUpdateByIdIdentitiesWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeUpdateByIdIdentities');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeUpdateByIdIdentities');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/identities/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\UserIdentity',
                '/MyYoastUsers/{id}/identities/{fk}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\UserIdentity', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\UserIdentity', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeUpdateByIdOrders
     *
     * Update a related item by id for orders.
     *
     * @param string $fk Foreign key for orders (required)
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\Order $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Order
     */
    public function myYoastUserPrototypeUpdateByIdOrders($fk, $id, $data = null)
    {
        list($response) = $this->myYoastUserPrototypeUpdateByIdOrdersWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeUpdateByIdOrdersWithHttpInfo
     *
     * Update a related item by id for orders.
     *
     * @param string $fk Foreign key for orders (required)
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\Order $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeUpdateByIdOrdersWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeUpdateByIdOrders');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeUpdateByIdOrders');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/orders/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Order',
                '/MyYoastUsers/{id}/orders/{fk}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Order', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Order', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeUpdateByIdSites
     *
     * Update a related item by id for sites.
     *
     * @param string $fk Foreign key for sites (required)
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\Site $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Site
     */
    public function myYoastUserPrototypeUpdateByIdSites($fk, $id, $data = null)
    {
        list($response) = $this->myYoastUserPrototypeUpdateByIdSitesWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeUpdateByIdSitesWithHttpInfo
     *
     * Update a related item by id for sites.
     *
     * @param string $fk Foreign key for sites (required)
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\Site $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Site, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeUpdateByIdSitesWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeUpdateByIdSites');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeUpdateByIdSites');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/sites/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Site',
                '/MyYoastUsers/{id}/sites/{fk}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Site', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Site', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserPrototypeUpdateByIdSubscriptions
     *
     * Update a related item by id for subscriptions.
     *
     * @param string $fk Foreign key for subscriptions (required)
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\Subscription $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Subscription
     */
    public function myYoastUserPrototypeUpdateByIdSubscriptions($fk, $id, $data = null)
    {
        list($response) = $this->myYoastUserPrototypeUpdateByIdSubscriptionsWithHttpInfo($fk, $id, $data);
        return $response;
    }

    /**
     * Operation myYoastUserPrototypeUpdateByIdSubscriptionsWithHttpInfo
     *
     * Update a related item by id for subscriptions.
     *
     * @param string $fk Foreign key for subscriptions (required)
     * @param string $id MyYoastUser id (required)
     * @param \Yoast\MyYoastApiClient\Model\Subscription $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserPrototypeUpdateByIdSubscriptionsWithHttpInfo($fk, $id, $data = null)
    {
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling myYoastUserPrototypeUpdateByIdSubscriptions');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserPrototypeUpdateByIdSubscriptions');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/subscriptions/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Subscription',
                '/MyYoastUsers/{id}/subscriptions/{fk}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Subscription', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Subscription', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserReplaceByIdPostMyYoastUsersidReplace
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\MyYoastUser
     */
    public function myYoastUserReplaceByIdPostMyYoastUsersidReplace($id, $data = null)
    {
        list($response) = $this->myYoastUserReplaceByIdPostMyYoastUsersidReplaceWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation myYoastUserReplaceByIdPostMyYoastUsersidReplaceWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\MyYoastUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserReplaceByIdPostMyYoastUsersidReplaceWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserReplaceByIdPostMyYoastUsersidReplace');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}/replace";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\MyYoastUser',
                '/MyYoastUsers/{id}/replace'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\MyYoastUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\MyYoastUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserReplaceByIdPutMyYoastUsersid
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\MyYoastUser
     */
    public function myYoastUserReplaceByIdPutMyYoastUsersid($id, $data = null)
    {
        list($response) = $this->myYoastUserReplaceByIdPutMyYoastUsersidWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation myYoastUserReplaceByIdPutMyYoastUsersidWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\MyYoastUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserReplaceByIdPutMyYoastUsersidWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling myYoastUserReplaceByIdPutMyYoastUsersid');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\MyYoastUser',
                '/MyYoastUsers/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\MyYoastUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\MyYoastUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserReplaceOrCreatePostMyYoastUsersReplaceOrCreate
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\MyYoastUser
     */
    public function myYoastUserReplaceOrCreatePostMyYoastUsersReplaceOrCreate($data = null)
    {
        list($response) = $this->myYoastUserReplaceOrCreatePostMyYoastUsersReplaceOrCreateWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation myYoastUserReplaceOrCreatePostMyYoastUsersReplaceOrCreateWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\MyYoastUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserReplaceOrCreatePostMyYoastUsersReplaceOrCreateWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/MyYoastUsers/replaceOrCreate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\MyYoastUser',
                '/MyYoastUsers/replaceOrCreate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\MyYoastUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\MyYoastUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserReplaceOrCreatePutMyYoastUsers
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\MyYoastUser
     */
    public function myYoastUserReplaceOrCreatePutMyYoastUsers($data = null)
    {
        list($response) = $this->myYoastUserReplaceOrCreatePutMyYoastUsersWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation myYoastUserReplaceOrCreatePutMyYoastUsersWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\MyYoastUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserReplaceOrCreatePutMyYoastUsersWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/MyYoastUsers";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\MyYoastUser',
                '/MyYoastUsers'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\MyYoastUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\MyYoastUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserResetPassword
     *
     * Reset password for a user with email.
     *
     * @param object $options  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function myYoastUserResetPassword($options)
    {
        list($response) = $this->myYoastUserResetPasswordWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation myYoastUserResetPasswordWithHttpInfo
     *
     * Reset password for a user with email.
     *
     * @param object $options  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserResetPasswordWithHttpInfo($options)
    {
        // verify the required parameter 'options' is set
        if ($options === null) {
            throw new \InvalidArgumentException('Missing the required parameter $options when calling myYoastUserResetPassword');
        }
        // parse inputs
        $resourcePath = "/MyYoastUsers/reset";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($options)) {
            $_tempBody = $options;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/MyYoastUsers/reset'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserUpdateAll
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse2002
     */
    public function myYoastUserUpdateAll($where = null, $data = null)
    {
        list($response) = $this->myYoastUserUpdateAllWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation myYoastUserUpdateAllWithHttpInfo
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserUpdateAllWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/MyYoastUsers/update";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse2002',
                '/MyYoastUsers/update'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation myYoastUserUpsertWithWhere
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\MyYoastUser
     */
    public function myYoastUserUpsertWithWhere($where = null, $data = null)
    {
        list($response) = $this->myYoastUserUpsertWithWhereWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation myYoastUserUpsertWithWhereWithHttpInfo
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Yoast\MyYoastApiClient\Model\MyYoastUser $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\MyYoastUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function myYoastUserUpsertWithWhereWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/MyYoastUsers/upsertWithWhere";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\MyYoastUser',
                '/MyYoastUsers/upsertWithWhere'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\MyYoastUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\MyYoastUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
