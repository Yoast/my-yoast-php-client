<?php
/**
 * CourseApi
 * PHP version 5
 *
 * @category Class
 * @package  Yoast\MyYoastApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * my-yoast
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yoast\MyYoastApiClient\Api;

use \Yoast\MyYoastApiClient\ApiClient;
use \Yoast\MyYoastApiClient\ApiException;
use \Yoast\MyYoastApiClient\Configuration;
use \Yoast\MyYoastApiClient\ObjectSerializer;

/**
 * CourseApi Class Doc Comment
 *
 * @category Class
 * @package  Yoast\MyYoastApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CourseApi
{
    /**
     * API Client
     *
     * @var \Yoast\MyYoastApiClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Yoast\MyYoastApiClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Yoast\MyYoastApiClient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Yoast\MyYoastApiClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Yoast\MyYoastApiClient\ApiClient $apiClient set the API client
     *
     * @return CourseApi
     */
    public function setApiClient(\Yoast\MyYoastApiClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation courseCount
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse200
     */
    public function courseCount($where = null)
    {
        list($response) = $this->courseCountWithHttpInfo($where);
        return $response;
    }

    /**
     * Operation courseCountWithHttpInfo
     *
     * Count instances of the model matched by where from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseCountWithHttpInfo($where = null)
    {
        // parse inputs
        $resourcePath = "/Courses/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse200',
                '/Courses/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseCreate
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\Course $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Course
     */
    public function courseCreate($data = null)
    {
        list($response) = $this->courseCreateWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation courseCreateWithHttpInfo
     *
     * Create a new instance of the model and persist it into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\Course $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Course, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseCreateWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Courses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Course',
                '/Courses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Course', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Course', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseCreateChangeStreamGetCoursesChangeStream
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function courseCreateChangeStreamGetCoursesChangeStream($options = null)
    {
        list($response) = $this->courseCreateChangeStreamGetCoursesChangeStreamWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation courseCreateChangeStreamGetCoursesChangeStreamWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseCreateChangeStreamGetCoursesChangeStreamWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/Courses/change-stream";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($options !== null) {
            $queryParams['options'] = $this->apiClient->getSerializer()->toQueryValue($options);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Courses/change-stream'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseCreateChangeStreamPostCoursesChangeStream
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \SplFileObject
     */
    public function courseCreateChangeStreamPostCoursesChangeStream($options = null)
    {
        list($response) = $this->courseCreateChangeStreamPostCoursesChangeStreamWithHttpInfo($options);
        return $response;
    }

    /**
     * Operation courseCreateChangeStreamPostCoursesChangeStreamWithHttpInfo
     *
     * Create a change stream.
     *
     * @param string $options  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseCreateChangeStreamPostCoursesChangeStreamWithHttpInfo($options = null)
    {
        // parse inputs
        $resourcePath = "/Courses/change-stream";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // form params
        if ($options !== null) {
            $formParams['options'] = $this->apiClient->getSerializer()->toFormValue($options);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\SplFileObject',
                '/Courses/change-stream'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\SplFileObject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\SplFileObject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseDeleteById
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return object
     */
    public function courseDeleteById($id)
    {
        list($response) = $this->courseDeleteByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation courseDeleteByIdWithHttpInfo
     *
     * Delete a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseDeleteByIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseDeleteById');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/Courses/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseExistsGetCoursesidExists
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse2001
     */
    public function courseExistsGetCoursesidExists($id)
    {
        list($response) = $this->courseExistsGetCoursesidExistsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation courseExistsGetCoursesidExistsWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseExistsGetCoursesidExistsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseExistsGetCoursesidExists');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}/exists";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse2001',
                '/Courses/{id}/exists'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseExistsHeadCoursesid
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse2001
     */
    public function courseExistsHeadCoursesid($id)
    {
        list($response) = $this->courseExistsHeadCoursesidWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation courseExistsHeadCoursesidWithHttpInfo
     *
     * Check whether a model instance exists in the data source.
     *
     * @param string $id Model id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseExistsHeadCoursesidWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseExistsHeadCoursesid');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse2001',
                '/Courses/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse2001', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse2001', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseFind
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Course[]
     */
    public function courseFind($filter = null)
    {
        list($response) = $this->courseFindWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation courseFindWithHttpInfo
     *
     * Find all instances of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Course[], HTTP status code, HTTP response headers (array of strings)
     */
    public function courseFindWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/Courses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Course[]',
                '/Courses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Course[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Course[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseFindById
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Course
     */
    public function courseFindById($id, $filter = null)
    {
        list($response) = $this->courseFindByIdWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation courseFindByIdWithHttpInfo
     *
     * Find a model instance by {{id}} from the data source.
     *
     * @param string $id Model id (required)
     * @param string $filter Filter defining fields and include - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Course, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseFindByIdWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseFindById');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Course',
                '/Courses/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Course', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Course', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseFindOne
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Course
     */
    public function courseFindOne($filter = null)
    {
        list($response) = $this->courseFindOneWithHttpInfo($filter);
        return $response;
    }

    /**
     * Operation courseFindOneWithHttpInfo
     *
     * Find first instance of the model matched by filter from the data source.
     *
     * @param string $filter Filter defining fields, where, include, order, offset, and limit - must be a JSON-encoded string ({\&quot;something\&quot;:\&quot;value\&quot;}) (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Course, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseFindOneWithHttpInfo($filter = null)
    {
        // parse inputs
        $resourcePath = "/Courses/findOne";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Course',
                '/Courses/findOne'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Course', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Course', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseFromAcademy
     *
     * @param string $course_data  (required)
     * @param string $extra_data  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Course
     */
    public function courseFromAcademy($course_data, $extra_data)
    {
        list($response) = $this->courseFromAcademyWithHttpInfo($course_data, $extra_data);
        return $response;
    }

    /**
     * Operation courseFromAcademyWithHttpInfo
     *
     * @param string $course_data  (required)
     * @param string $extra_data  (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Course, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseFromAcademyWithHttpInfo($course_data, $extra_data)
    {
        // verify the required parameter 'course_data' is set
        if ($course_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $course_data when calling courseFromAcademy');
        }
        // verify the required parameter 'extra_data' is set
        if ($extra_data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $extra_data when calling courseFromAcademy');
        }
        // parse inputs
        $resourcePath = "/Courses/fromAcademy";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // form params
        if ($course_data !== null) {
            $formParams['courseData'] = $this->apiClient->getSerializer()->toFormValue($course_data);
        }
        // form params
        if ($extra_data !== null) {
            $formParams['extraData'] = $this->apiClient->getSerializer()->toFormValue($extra_data);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Course',
                '/Courses/fromAcademy'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Course', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Course', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursePatchOrCreate
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\Course $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Course
     */
    public function coursePatchOrCreate($data = null)
    {
        list($response) = $this->coursePatchOrCreateWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation coursePatchOrCreateWithHttpInfo
     *
     * Patch an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\Course $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Course, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursePatchOrCreateWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Courses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Course',
                '/Courses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Course', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Course', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursePrototypeCountProductGroups
     *
     * Counts productGroups of Course.
     *
     * @param string $id Course id (required)
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse200
     */
    public function coursePrototypeCountProductGroups($id, $where = null)
    {
        list($response) = $this->coursePrototypeCountProductGroupsWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation coursePrototypeCountProductGroupsWithHttpInfo
     *
     * Counts productGroups of Course.
     *
     * @param string $id Course id (required)
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursePrototypeCountProductGroupsWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling coursePrototypeCountProductGroups');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}/productGroups/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse200',
                '/Courses/{id}/productGroups/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursePrototypeCountProducts
     *
     * Counts products of Course.
     *
     * @param string $id Course id (required)
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse200
     */
    public function coursePrototypeCountProducts($id, $where = null)
    {
        list($response) = $this->coursePrototypeCountProductsWithHttpInfo($id, $where);
        return $response;
    }

    /**
     * Operation coursePrototypeCountProductsWithHttpInfo
     *
     * Counts products of Course.
     *
     * @param string $id Course id (required)
     * @param string $where Criteria to match model instances (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursePrototypeCountProductsWithHttpInfo($id, $where = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling coursePrototypeCountProducts');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}/products/count";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse200',
                '/Courses/{id}/products/count'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse200', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse200', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursePrototypeCreateProductGroups
     *
     * Creates a new instance in productGroups of this model.
     *
     * @param string $id Course id (required)
     * @param \Yoast\MyYoastApiClient\Model\ProductGroup $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ProductGroup
     */
    public function coursePrototypeCreateProductGroups($id, $data = null)
    {
        list($response) = $this->coursePrototypeCreateProductGroupsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation coursePrototypeCreateProductGroupsWithHttpInfo
     *
     * Creates a new instance in productGroups of this model.
     *
     * @param string $id Course id (required)
     * @param \Yoast\MyYoastApiClient\Model\ProductGroup $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ProductGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursePrototypeCreateProductGroupsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling coursePrototypeCreateProductGroups');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}/productGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ProductGroup',
                '/Courses/{id}/productGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ProductGroup', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ProductGroup', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursePrototypeCreateProducts
     *
     * Creates a new instance in products of this model.
     *
     * @param string $id Course id (required)
     * @param \Yoast\MyYoastApiClient\Model\Product $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Product
     */
    public function coursePrototypeCreateProducts($id, $data = null)
    {
        list($response) = $this->coursePrototypeCreateProductsWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation coursePrototypeCreateProductsWithHttpInfo
     *
     * Creates a new instance in products of this model.
     *
     * @param string $id Course id (required)
     * @param \Yoast\MyYoastApiClient\Model\Product $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Product, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursePrototypeCreateProductsWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling coursePrototypeCreateProducts');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}/products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Product',
                '/Courses/{id}/products'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Product', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Product', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursePrototypeDeleteProductGroups
     *
     * Deletes all productGroups of this model.
     *
     * @param string $id Course id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function coursePrototypeDeleteProductGroups($id)
    {
        list($response) = $this->coursePrototypeDeleteProductGroupsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation coursePrototypeDeleteProductGroupsWithHttpInfo
     *
     * Deletes all productGroups of this model.
     *
     * @param string $id Course id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursePrototypeDeleteProductGroupsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling coursePrototypeDeleteProductGroups');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}/productGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Courses/{id}/productGroups'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation coursePrototypeDeleteProducts
     *
     * Deletes all products of this model.
     *
     * @param string $id Course id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function coursePrototypeDeleteProducts($id)
    {
        list($response) = $this->coursePrototypeDeleteProductsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation coursePrototypeDeleteProductsWithHttpInfo
     *
     * Deletes all products of this model.
     *
     * @param string $id Course id (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursePrototypeDeleteProductsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling coursePrototypeDeleteProducts');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}/products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Courses/{id}/products'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation coursePrototypeDestroyByIdProductGroups
     *
     * Delete a related item by id for productGroups.
     *
     * @param string $id Course id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function coursePrototypeDestroyByIdProductGroups($id, $fk)
    {
        list($response) = $this->coursePrototypeDestroyByIdProductGroupsWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation coursePrototypeDestroyByIdProductGroupsWithHttpInfo
     *
     * Delete a related item by id for productGroups.
     *
     * @param string $id Course id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursePrototypeDestroyByIdProductGroupsWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling coursePrototypeDestroyByIdProductGroups');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling coursePrototypeDestroyByIdProductGroups');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}/productGroups/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Courses/{id}/productGroups/{fk}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation coursePrototypeDestroyByIdProducts
     *
     * Delete a related item by id for products.
     *
     * @param string $id Course id (required)
     * @param string $fk Foreign key for products (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return void
     */
    public function coursePrototypeDestroyByIdProducts($id, $fk)
    {
        list($response) = $this->coursePrototypeDestroyByIdProductsWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation coursePrototypeDestroyByIdProductsWithHttpInfo
     *
     * Delete a related item by id for products.
     *
     * @param string $id Course id (required)
     * @param string $fk Foreign key for products (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursePrototypeDestroyByIdProductsWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling coursePrototypeDestroyByIdProducts');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling coursePrototypeDestroyByIdProducts');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}/products/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Courses/{id}/products/{fk}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation coursePrototypeFindByIdProductGroups
     *
     * Find a related item by id for productGroups.
     *
     * @param string $id Course id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ProductGroup
     */
    public function coursePrototypeFindByIdProductGroups($id, $fk)
    {
        list($response) = $this->coursePrototypeFindByIdProductGroupsWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation coursePrototypeFindByIdProductGroupsWithHttpInfo
     *
     * Find a related item by id for productGroups.
     *
     * @param string $id Course id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ProductGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursePrototypeFindByIdProductGroupsWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling coursePrototypeFindByIdProductGroups');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling coursePrototypeFindByIdProductGroups');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}/productGroups/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ProductGroup',
                '/Courses/{id}/productGroups/{fk}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ProductGroup', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ProductGroup', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursePrototypeFindByIdProducts
     *
     * Find a related item by id for products.
     *
     * @param string $id Course id (required)
     * @param string $fk Foreign key for products (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Product
     */
    public function coursePrototypeFindByIdProducts($id, $fk)
    {
        list($response) = $this->coursePrototypeFindByIdProductsWithHttpInfo($id, $fk);
        return $response;
    }

    /**
     * Operation coursePrototypeFindByIdProductsWithHttpInfo
     *
     * Find a related item by id for products.
     *
     * @param string $id Course id (required)
     * @param string $fk Foreign key for products (required)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Product, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursePrototypeFindByIdProductsWithHttpInfo($id, $fk)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling coursePrototypeFindByIdProducts');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling coursePrototypeFindByIdProducts');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}/products/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Product',
                '/Courses/{id}/products/{fk}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Product', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Product', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursePrototypeGetProductGroups
     *
     * Queries productGroups of Course.
     *
     * @param string $id Course id (required)
     * @param string $filter  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ProductGroup[]
     */
    public function coursePrototypeGetProductGroups($id, $filter = null)
    {
        list($response) = $this->coursePrototypeGetProductGroupsWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation coursePrototypeGetProductGroupsWithHttpInfo
     *
     * Queries productGroups of Course.
     *
     * @param string $id Course id (required)
     * @param string $filter  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ProductGroup[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coursePrototypeGetProductGroupsWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling coursePrototypeGetProductGroups');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}/productGroups";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ProductGroup[]',
                '/Courses/{id}/productGroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ProductGroup[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ProductGroup[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursePrototypeGetProducts
     *
     * Queries products of Course.
     *
     * @param string $id Course id (required)
     * @param string $filter  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Product[]
     */
    public function coursePrototypeGetProducts($id, $filter = null)
    {
        list($response) = $this->coursePrototypeGetProductsWithHttpInfo($id, $filter);
        return $response;
    }

    /**
     * Operation coursePrototypeGetProductsWithHttpInfo
     *
     * Queries products of Course.
     *
     * @param string $id Course id (required)
     * @param string $filter  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Product[], HTTP status code, HTTP response headers (array of strings)
     */
    public function coursePrototypeGetProductsWithHttpInfo($id, $filter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling coursePrototypeGetProducts');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}/products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($filter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Product[]',
                '/Courses/{id}/products'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Product[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Product[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursePrototypePatchAttributes
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id Course id (required)
     * @param \Yoast\MyYoastApiClient\Model\Course $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Course
     */
    public function coursePrototypePatchAttributes($id, $data = null)
    {
        list($response) = $this->coursePrototypePatchAttributesWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation coursePrototypePatchAttributesWithHttpInfo
     *
     * Patch attributes for a model instance and persist it into the data source.
     *
     * @param string $id Course id (required)
     * @param \Yoast\MyYoastApiClient\Model\Course $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Course, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursePrototypePatchAttributesWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling coursePrototypePatchAttributes');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PATCH',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Course',
                '/Courses/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Course', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Course', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursePrototypeUpdateByIdProductGroups
     *
     * Update a related item by id for productGroups.
     *
     * @param string $id Course id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @param \Yoast\MyYoastApiClient\Model\ProductGroup $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\ProductGroup
     */
    public function coursePrototypeUpdateByIdProductGroups($id, $fk, $data = null)
    {
        list($response) = $this->coursePrototypeUpdateByIdProductGroupsWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation coursePrototypeUpdateByIdProductGroupsWithHttpInfo
     *
     * Update a related item by id for productGroups.
     *
     * @param string $id Course id (required)
     * @param string $fk Foreign key for productGroups (required)
     * @param \Yoast\MyYoastApiClient\Model\ProductGroup $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\ProductGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursePrototypeUpdateByIdProductGroupsWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling coursePrototypeUpdateByIdProductGroups');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling coursePrototypeUpdateByIdProductGroups');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}/productGroups/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\ProductGroup',
                '/Courses/{id}/productGroups/{fk}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\ProductGroup', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\ProductGroup', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation coursePrototypeUpdateByIdProducts
     *
     * Update a related item by id for products.
     *
     * @param string $id Course id (required)
     * @param string $fk Foreign key for products (required)
     * @param \Yoast\MyYoastApiClient\Model\Product $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Product
     */
    public function coursePrototypeUpdateByIdProducts($id, $fk, $data = null)
    {
        list($response) = $this->coursePrototypeUpdateByIdProductsWithHttpInfo($id, $fk, $data);
        return $response;
    }

    /**
     * Operation coursePrototypeUpdateByIdProductsWithHttpInfo
     *
     * Update a related item by id for products.
     *
     * @param string $id Course id (required)
     * @param string $fk Foreign key for products (required)
     * @param \Yoast\MyYoastApiClient\Model\Product $data  (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Product, HTTP status code, HTTP response headers (array of strings)
     */
    public function coursePrototypeUpdateByIdProductsWithHttpInfo($id, $fk, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling coursePrototypeUpdateByIdProducts');
        }
        // verify the required parameter 'fk' is set
        if ($fk === null) {
            throw new \InvalidArgumentException('Missing the required parameter $fk when calling coursePrototypeUpdateByIdProducts');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}/products/{fk}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($fk !== null) {
            $resourcePath = str_replace(
                "{" . "fk" . "}",
                $this->apiClient->getSerializer()->toPathValue($fk),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Product',
                '/Courses/{id}/products/{fk}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Product', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Product', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseReplaceByIdPostCoursesidReplace
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Yoast\MyYoastApiClient\Model\Course $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Course
     */
    public function courseReplaceByIdPostCoursesidReplace($id, $data = null)
    {
        list($response) = $this->courseReplaceByIdPostCoursesidReplaceWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation courseReplaceByIdPostCoursesidReplaceWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Yoast\MyYoastApiClient\Model\Course $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Course, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseReplaceByIdPostCoursesidReplaceWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseReplaceByIdPostCoursesidReplace');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}/replace";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Course',
                '/Courses/{id}/replace'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Course', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Course', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseReplaceByIdPutCoursesid
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Yoast\MyYoastApiClient\Model\Course $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Course
     */
    public function courseReplaceByIdPutCoursesid($id, $data = null)
    {
        list($response) = $this->courseReplaceByIdPutCoursesidWithHttpInfo($id, $data);
        return $response;
    }

    /**
     * Operation courseReplaceByIdPutCoursesidWithHttpInfo
     *
     * Replace attributes for a model instance and persist it into the data source.
     *
     * @param string $id Model id (required)
     * @param \Yoast\MyYoastApiClient\Model\Course $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Course, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseReplaceByIdPutCoursesidWithHttpInfo($id, $data = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling courseReplaceByIdPutCoursesid');
        }
        // parse inputs
        $resourcePath = "/Courses/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Course',
                '/Courses/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Course', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Course', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseReplaceOrCreatePostCoursesReplaceOrCreate
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\Course $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Course
     */
    public function courseReplaceOrCreatePostCoursesReplaceOrCreate($data = null)
    {
        list($response) = $this->courseReplaceOrCreatePostCoursesReplaceOrCreateWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation courseReplaceOrCreatePostCoursesReplaceOrCreateWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\Course $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Course, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseReplaceOrCreatePostCoursesReplaceOrCreateWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Courses/replaceOrCreate";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Course',
                '/Courses/replaceOrCreate'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Course', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Course', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseReplaceOrCreatePutCourses
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\Course $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Course
     */
    public function courseReplaceOrCreatePutCourses($data = null)
    {
        list($response) = $this->courseReplaceOrCreatePutCoursesWithHttpInfo($data);
        return $response;
    }

    /**
     * Operation courseReplaceOrCreatePutCoursesWithHttpInfo
     *
     * Replace an existing model instance or insert a new one into the data source.
     *
     * @param \Yoast\MyYoastApiClient\Model\Course $data Model instance data (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Course, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseReplaceOrCreatePutCoursesWithHttpInfo($data = null)
    {
        // parse inputs
        $resourcePath = "/Courses";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Course',
                '/Courses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Course', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Course', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseUpdateAll
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Yoast\MyYoastApiClient\Model\Course $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\InlineResponse2002
     */
    public function courseUpdateAll($where = null, $data = null)
    {
        list($response) = $this->courseUpdateAllWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation courseUpdateAllWithHttpInfo
     *
     * Update instances of the model matched by {{where}} from the data source.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Yoast\MyYoastApiClient\Model\Course $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseUpdateAllWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/Courses/update";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\InlineResponse2002',
                '/Courses/update'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\InlineResponse2002', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\InlineResponse2002', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation courseUpsertWithWhere
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Yoast\MyYoastApiClient\Model\Course $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return \Yoast\MyYoastApiClient\Model\Course
     */
    public function courseUpsertWithWhere($where = null, $data = null)
    {
        list($response) = $this->courseUpsertWithWhereWithHttpInfo($where, $data);
        return $response;
    }

    /**
     * Operation courseUpsertWithWhereWithHttpInfo
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria.
     *
     * @param string $where Criteria to match model instances (optional)
     * @param \Yoast\MyYoastApiClient\Model\Course $data An object of model property name/value pairs (optional)
     * @throws \Yoast\MyYoastApiClient\ApiException on non-2xx response
     * @return array of \Yoast\MyYoastApiClient\Model\Course, HTTP status code, HTTP response headers (array of strings)
     */
    public function courseUpsertWithWhereWithHttpInfo($where = null, $data = null)
    {
        // parse inputs
        $resourcePath = "/Courses/upsertWithWhere";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml', 'text/xml', 'application/javascript', 'text/javascript']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/x-www-form-urlencoded', 'application/xml', 'text/xml']);

        // query params
        if ($where !== null) {
            $queryParams['where'] = $this->apiClient->getSerializer()->toQueryValue($where);
        }
        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Yoast\MyYoastApiClient\Model\Course',
                '/Courses/upsertWithWhere'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Yoast\MyYoastApiClient\Model\Course', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Yoast\MyYoastApiClient\Model\Course', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
