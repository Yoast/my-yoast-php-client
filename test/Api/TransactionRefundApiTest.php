<?php
/**
 * TransactionRefundApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Yoast\MyYoastApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * my-yoast
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Yoast\MyYoastApiClient;

use \Yoast\MyYoastApiClient\Configuration;
use \Yoast\MyYoastApiClient\ApiClient;
use \Yoast\MyYoastApiClient\ApiException;
use \Yoast\MyYoastApiClient\ObjectSerializer;

/**
 * TransactionRefundApiTest Class Doc Comment
 *
 * @category Class
 * @package  Yoast\MyYoastApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionRefundApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for transactionRefundCount
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testTransactionRefundCount()
    {
    }

    /**
     * Test case for transactionRefundCreate
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testTransactionRefundCreate()
    {
    }

    /**
     * Test case for transactionRefundCreateChangeStreamGetTransactionRefundsChangeStream
     *
     * Create a change stream..
     *
     */
    public function testTransactionRefundCreateChangeStreamGetTransactionRefundsChangeStream()
    {
    }

    /**
     * Test case for transactionRefundCreateChangeStreamPostTransactionRefundsChangeStream
     *
     * Create a change stream..
     *
     */
    public function testTransactionRefundCreateChangeStreamPostTransactionRefundsChangeStream()
    {
    }

    /**
     * Test case for transactionRefundDeleteById
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testTransactionRefundDeleteById()
    {
    }

    /**
     * Test case for transactionRefundExistsGetTransactionRefundsidExists
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testTransactionRefundExistsGetTransactionRefundsidExists()
    {
    }

    /**
     * Test case for transactionRefundExistsHeadTransactionRefundsid
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testTransactionRefundExistsHeadTransactionRefundsid()
    {
    }

    /**
     * Test case for transactionRefundFind
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testTransactionRefundFind()
    {
    }

    /**
     * Test case for transactionRefundFindById
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testTransactionRefundFindById()
    {
    }

    /**
     * Test case for transactionRefundFindOne
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testTransactionRefundFindOne()
    {
    }

    /**
     * Test case for transactionRefundPatchOrCreate
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testTransactionRefundPatchOrCreate()
    {
    }

    /**
     * Test case for transactionRefundPrototypeGetTransaction
     *
     * Fetches belongsTo relation transaction..
     *
     */
    public function testTransactionRefundPrototypeGetTransaction()
    {
    }

    /**
     * Test case for transactionRefundPrototypePatchAttributes
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testTransactionRefundPrototypePatchAttributes()
    {
    }

    /**
     * Test case for transactionRefundReplaceByIdPostTransactionRefundsidReplace
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testTransactionRefundReplaceByIdPostTransactionRefundsidReplace()
    {
    }

    /**
     * Test case for transactionRefundReplaceByIdPutTransactionRefundsid
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testTransactionRefundReplaceByIdPutTransactionRefundsid()
    {
    }

    /**
     * Test case for transactionRefundReplaceOrCreatePostTransactionRefundsReplaceOrCreate
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testTransactionRefundReplaceOrCreatePostTransactionRefundsReplaceOrCreate()
    {
    }

    /**
     * Test case for transactionRefundReplaceOrCreatePutTransactionRefunds
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testTransactionRefundReplaceOrCreatePutTransactionRefunds()
    {
    }

    /**
     * Test case for transactionRefundUpdateAll
     *
     * Update instances of the model matched by {{where}} from the data source..
     *
     */
    public function testTransactionRefundUpdateAll()
    {
    }

    /**
     * Test case for transactionRefundUpsertWithWhere
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria..
     *
     */
    public function testTransactionRefundUpsertWithWhere()
    {
    }
}
