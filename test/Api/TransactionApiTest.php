<?php
/**
 * TransactionApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Yoast\MyYoastApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * my-yoast
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Yoast\MyYoastApiClient;

use \Yoast\MyYoastApiClient\Configuration;
use \Yoast\MyYoastApiClient\ApiClient;
use \Yoast\MyYoastApiClient\ApiException;
use \Yoast\MyYoastApiClient\ObjectSerializer;

/**
 * TransactionApiTest Class Doc Comment
 *
 * @category Class
 * @package  Yoast\MyYoastApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {

    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {

    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {

    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {

    }

    /**
     * Test case for transactionCount
     *
     * Count instances of the model matched by where from the data source..
     *
     */
    public function testTransactionCount()
    {

    }

    /**
     * Test case for transactionCreate
     *
     * Create a new instance of the model and persist it into the data source..
     *
     */
    public function testTransactionCreate()
    {

    }

    /**
     * Test case for transactionCreateChangeStreamGetTransactionsChangeStream
     *
     * Create a change stream..
     *
     */
    public function testTransactionCreateChangeStreamGetTransactionsChangeStream()
    {

    }

    /**
     * Test case for transactionCreateChangeStreamPostTransactionsChangeStream
     *
     * Create a change stream..
     *
     */
    public function testTransactionCreateChangeStreamPostTransactionsChangeStream()
    {

    }

    /**
     * Test case for transactionDeleteById
     *
     * Delete a model instance by {{id}} from the data source..
     *
     */
    public function testTransactionDeleteById()
    {

    }

    /**
     * Test case for transactionExistsGetTransactionsidExists
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testTransactionExistsGetTransactionsidExists()
    {

    }

    /**
     * Test case for transactionExistsHeadTransactionsid
     *
     * Check whether a model instance exists in the data source..
     *
     */
    public function testTransactionExistsHeadTransactionsid()
    {

    }

    /**
     * Test case for transactionFind
     *
     * Find all instances of the model matched by filter from the data source..
     *
     */
    public function testTransactionFind()
    {

    }

    /**
     * Test case for transactionFindById
     *
     * Find a model instance by {{id}} from the data source..
     *
     */
    public function testTransactionFindById()
    {

    }

    /**
     * Test case for transactionFindOne
     *
     * Find first instance of the model matched by filter from the data source..
     *
     */
    public function testTransactionFindOne()
    {

    }

    /**
     * Test case for transactionPatchOrCreate
     *
     * Patch an existing model instance or insert a new one into the data source..
     *
     */
    public function testTransactionPatchOrCreate()
    {

    }

    /**
     * Test case for transactionPrototypeCountItems
     *
     * Counts items of Transaction..
     *
     */
    public function testTransactionPrototypeCountItems()
    {

    }

    /**
     * Test case for transactionPrototypeCreateItems
     *
     * Creates a new instance in items of this model..
     *
     */
    public function testTransactionPrototypeCreateItems()
    {

    }

    /**
     * Test case for transactionPrototypeDeleteItems
     *
     * Deletes all items of this model..
     *
     */
    public function testTransactionPrototypeDeleteItems()
    {

    }

    /**
     * Test case for transactionPrototypeDestroyByIdItems
     *
     * Delete a related item by id for items..
     *
     */
    public function testTransactionPrototypeDestroyByIdItems()
    {

    }

    /**
     * Test case for transactionPrototypeFindByIdItems
     *
     * Find a related item by id for items..
     *
     */
    public function testTransactionPrototypeFindByIdItems()
    {

    }

    /**
     * Test case for transactionPrototypeGetCustomer
     *
     * Fetches belongsTo relation customer..
     *
     */
    public function testTransactionPrototypeGetCustomer()
    {

    }

    /**
     * Test case for transactionPrototypeGetItems
     *
     * Queries items of Transaction..
     *
     */
    public function testTransactionPrototypeGetItems()
    {

    }

    /**
     * Test case for transactionPrototypePatchAttributes
     *
     * Patch attributes for a model instance and persist it into the data source..
     *
     */
    public function testTransactionPrototypePatchAttributes()
    {

    }

    /**
     * Test case for transactionPrototypeUpdateByIdItems
     *
     * Update a related item by id for items..
     *
     */
    public function testTransactionPrototypeUpdateByIdItems()
    {

    }

    /**
     * Test case for transactionReplaceByIdPostTransactionsidReplace
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testTransactionReplaceByIdPostTransactionsidReplace()
    {

    }

    /**
     * Test case for transactionReplaceByIdPutTransactionsid
     *
     * Replace attributes for a model instance and persist it into the data source..
     *
     */
    public function testTransactionReplaceByIdPutTransactionsid()
    {

    }

    /**
     * Test case for transactionReplaceOrCreatePostTransactionsReplaceOrCreate
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testTransactionReplaceOrCreatePostTransactionsReplaceOrCreate()
    {

    }

    /**
     * Test case for transactionReplaceOrCreatePutTransactions
     *
     * Replace an existing model instance or insert a new one into the data source..
     *
     */
    public function testTransactionReplaceOrCreatePutTransactions()
    {

    }

    /**
     * Test case for transactionUpdateAll
     *
     * Update instances of the model matched by {{where}} from the data source..
     *
     */
    public function testTransactionUpdateAll()
    {

    }

    /**
     * Test case for transactionUpsertWithWhere
     *
     * Update an existing model instance or insert a new one into the data source based on the where criteria..
     *
     */
    public function testTransactionUpsertWithWhere()
    {

    }

}
